// vk-safe-video-background.js - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
(function() {
    'use strict';
    
    console.log('üîí –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è VK-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ —Ñ–æ–Ω–∞...');

    // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–õ–Ø VK
    const VK_SAFE_CONFIG = {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è VK
        sources: [
            // 1. –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
            {
                type: 'local',
                urls: ['./ambulance-bg.mp4', './medical-bg.mp4', './hospital-bg.mp4'],
                name: '–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–∏–¥–µ–æ'
            },
            
            // 2. –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ CSS —Ñ–æ–Ω—ã (fallback)
            {
                type: 'css_animation',
                name: 'CSS –∞–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞',
                generator: 'pulse'
            },
            
            // 3. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            {
                type: 'gradient',
                name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç',
                generator: 'medical'
            },
            
            // 4. Canvas –∞–Ω–∏–º–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
            {
                type: 'canvas',
                name: 'Canvas –∞–Ω–∏–º–∞—Ü–∏—è',
                generator: 'heartbeat'
            }
        ],
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VK
        vkSettings: {
            respectCSP: true,           // –°–æ–±–ª—é–¥–∞—Ç—å CSP –ø–æ–ª–∏—Ç–∏–∫—É
            fallbackFirst: true,       // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            detectVKEnvironment: true, // –û–ø—Ä–µ–¥–µ–ª—è—Ç—å VK –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            maxVideoSize: 5 * 1024 * 1024, // –ú–∞–∫—Å–∏–º—É–º 5MB
            timeoutMs: 8000,          // –¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            respectAutoplayPolicy: true // –°–æ–±–ª—é–¥–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        },
        
        // –í–Ω–µ—à–Ω–∏–µ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
        externalVideos: [
            {
                url: 'https://videos.pexels.com/video-files/6687824/6687824-hd_1280_720_25fps.mp4',
                name: 'Pexels Video 1 (720p)',
                size: 'small'
            },
            {
                url: 'https://videos.pexels.com/video-files/6688264/6688264-hd_1280_720_25fps.mp4',
                name: 'Pexels Video 2 (720p)',
                size: 'small'
            }
        ]
    };

    let videoContainer = null;
    let currentBackground = null;
    let isVKEnvironment = false;
    let isInitialized = false;

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ VK –æ–∫—Ä—É–∂–µ–Ω–∏—è
    function detectVKEnvironment() {
        const indicators = [
            // VK Bridge
            typeof window.vkBridge !== 'undefined',
            typeof window.VKWebAppInit !== 'undefined',
            
            // VK –¥–æ–º–µ–Ω—ã
            window.location.hostname.includes('vk.com'),
            window.location.hostname.includes('vk.me'),
            
            // User Agent
            navigator.userAgent.includes('vk.com'),
            navigator.userAgent.includes('VKApp'),
            
            // Referrer
            document.referrer.includes('vk.com'),
            
            // Parent frame
            window.parent !== window && window.parent.location.hostname.includes('vk.com')
        ];
        
        isVKEnvironment = indicators.some(Boolean);
        
        console.log('üîç VK –æ–∫—Ä—É–∂–µ–Ω–∏–µ:', isVKEnvironment ? '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ' : '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        console.log('üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã VK:', indicators);
        
        return isVKEnvironment;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSP –ø–æ–ª–∏—Ç–∏–∫–∏
    function checkCSPPolicy() {
        const metaCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
        if (metaCSP) {
            const cspContent = metaCSP.getAttribute('content');
            console.log('üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CSP –ø–æ–ª–∏—Ç–∏–∫–∞:', cspContent);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ –≤–Ω–µ—à–Ω–∏–µ –º–µ–¥–∏–∞
            const allowsExternalMedia = cspContent.includes('media-src') && 
                                      (cspContent.includes('*') || cspContent.includes('pexels.com'));
            
            return allowsExternalMedia;
        }
        
        return true; // –ï—Å–ª–∏ CSP –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    function createSafeContainer() {
        const existingContainers = document.querySelectorAll('[id*="video"], [id*="background"]');
        existingContainers.forEach(el => el.remove());

        videoContainer = document.createElement('div');
        videoContainer.id = 'vk-safe-background';
        videoContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -100;
            overflow: hidden;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        `;

        document.body.insertBefore(videoContainer, document.body.firstChild);
        console.log('üì¶ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω');
        return videoContainer;
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    async function tryLocalVideo() {
        console.log('üìÅ –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã...');
        
        for (const videoUrl of VK_SAFE_CONFIG.sources[0].urls) {
            try {
                const video = await createSafeVideo(videoUrl);
                if (video) {
                    console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${videoUrl}`);
                    return video;
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${videoUrl}`, error);
            }
        }
        
        return null;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    function createSafeVideo(url) {
        return new Promise((resolve, reject) => {
            const video = document.createElement('video');
            video.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                min-width: 100%;
                min-height: 100%;
                width: auto;
                height: auto;
                transform: translate(-50%, -50%);
                object-fit: cover;
                opacity: 0;
                transition: opacity 2s ease-in-out;
                filter: blur(1px) brightness(0.4) contrast(1.1) saturate(0.8);
            `;
            
            video.muted = true;
            video.loop = true;
            video.playsInline = true;
            video.preload = 'metadata'; // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            const timeoutId = setTimeout(() => {
                reject(new Error('–¢–∞–π–º-–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'));
            }, VK_SAFE_CONFIG.vkSettings.timeoutMs);
            
            video.addEventListener('loadeddata', () => {
                clearTimeout(timeoutId);
                video.style.opacity = '0.6';
                
                // –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                const playPromise = video.play();
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log('‚ñ∂Ô∏è –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
                            resolve(video);
                        })
                        .catch(error => {
                            console.warn('‚ö†Ô∏è –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', error);
                            // –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è - —ç—Ç–æ —Ç–æ–∂–µ —É—Å–ø–µ—Ö
                            resolve(video);
                        });
                } else {
                    resolve(video);
                }
            });
            
            video.addEventListener('error', (e) => {
                clearTimeout(timeoutId);
                reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${e.message}`));
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            video.src = url;
        });
    }

    // CSS –∞–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞ (–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞)
    function createPulseAnimation() {
        console.log('üíì –°–æ–∑–¥–∞–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞...');
        
        const pulseContainer = document.createElement('div');
        pulseContainer.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 30% 20%, rgba(102, 126, 234, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 70% 60%, rgba(118, 75, 162, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 20% 80%, rgba(79, 209, 197, 0.3) 0%, transparent 50%),
                linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
            animation: medicalPulse 4s ease-in-out infinite;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.getElementById('medical-pulse-styles')) {
            const style = document.createElement('style');
            style.id = 'medical-pulse-styles';
            style.textContent = `
                @keyframes medicalPulse {
                    0%, 100% {
                        filter: brightness(0.8) saturate(0.9);
                        transform: scale(1);
                    }
                    25% {
                        filter: brightness(1.1) saturate(1.1);
                        transform: scale(1.02);
                    }
                    50% {
                        filter: brightness(0.9) saturate(1.0);
                        transform: scale(1.01);
                    }
                    75% {
                        filter: brightness(1.0) saturate(1.05);
                        transform: scale(1.015);
                    }
                }
                
                @keyframes heartbeat {
                    0%, 100% { opacity: 0.6; transform: scale(1); }
                    15% { opacity: 0.9; transform: scale(1.1); }
                    30% { opacity: 0.7; transform: scale(1.05); }
                    45% { opacity: 0.8; transform: scale(1.08); }
                    60% { opacity: 0.6; transform: scale(1); }
                }
            `;
            document.head.appendChild(style);
        }
        
        return pulseContainer;
    }

    // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function createMedicalGradient() {
        console.log('üè• –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç...');
        
        const gradientContainer = document.createElement('div');
        gradientContainer.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                linear-gradient(45deg, 
                    rgba(79, 209, 197, 0.1) 0%, 
                    rgba(102, 126, 234, 0.15) 25%, 
                    rgba(118, 75, 162, 0.1) 50%, 
                    rgba(79, 209, 197, 0.15) 75%, 
                    rgba(102, 126, 234, 0.1) 100%
                ),
                linear-gradient(135deg, #1e293b 0%, #334155 100%);
            animation: medicalFlow 15s ease-in-out infinite;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (let i = 0; i < 6; i++) {
            const medElement = document.createElement('div');
            medElement.style.cssText = `
                position: absolute;
                width: 60px;
                height: 60px;
                background: rgba(79, 209, 197, 0.2);
                border-radius: 50%;
                top: ${Math.random() * 100}%;
                left: ${Math.random() * 100}%;
                animation: heartbeat ${3 + Math.random() * 4}s ease-in-out infinite;
                animation-delay: ${Math.random() * 2}s;
            `;
            gradientContainer.appendChild(medElement);
        }
        
        return gradientContainer;
    }

    // Canvas –∞–Ω–∏–º–∞—Ü–∏—è (–µ—Å–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    function createCanvasAnimation() {
        console.log('üé® –°–æ–∑–¥–∞–µ–º Canvas –∞–Ω–∏–º–∞—Ü–∏—é...');
        
        const canvas = document.createElement('canvas');
        canvas.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0.7;
        `;
        
        const ctx = canvas.getContext('2d');
        
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        
        function drawHeartbeat() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, 'rgba(102, 126, 234, 0.1)');
            gradient.addColorStop(0.5, 'rgba(79, 209, 197, 0.1)');
            gradient.addColorStop(1, 'rgba(118, 75, 162, 0.1)');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä—É–≥–∏
            const time = Date.now() * 0.002;
            for (let i = 0; i < 5; i++) {
                const x = (Math.sin(time + i) * 0.3 + 0.5) * canvas.width;
                const y = (Math.cos(time + i * 0.7) * 0.3 + 0.5) * canvas.height;
                const radius = (Math.sin(time * 2 + i) * 0.5 + 0.5) * 30 + 20;
                
                ctx.beginPath();
                ctx.arc(x, y, radius, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(79, 209, 197, ${0.1 + Math.sin(time + i) * 0.1})`;
                ctx.fill();
            }
            
            requestAnimationFrame(drawHeartbeat);
        }
        
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);
        drawHeartbeat();
        
        return canvas;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async function initVKSafeBackground() {
        if (isInitialized) {
            console.log('‚ö†Ô∏è –§–æ–Ω —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK-–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ–Ω–∞...');
        
        detectVKEnvironment();
        createSafeContainer();
        
        let backgroundCreated = false;
        
        // 1. –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ (—Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        try {
            const localVideo = await tryLocalVideo();
            if (localVideo) {
                videoContainer.appendChild(localVideo);
                currentBackground = localVideo;
                backgroundCreated = true;
                console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error);
        }
        
        // 2. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        if (!backgroundCreated) {
            const pulseAnimation = createPulseAnimation();
            videoContainer.appendChild(pulseAnimation);
            currentBackground = pulseAnimation;
            backgroundCreated = true;
            console.log('‚úÖ CSS –∞–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        isInitialized = true;
        console.log('‚úÖ VK-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    window.vkSafeBackground = {
        status: function() {
            return {
                initialized: isInitialized,
                isVKEnvironment: isVKEnvironment,
                currentBackground: currentBackground?.tagName || 'None',
                containerExists: !!videoContainer
            };
        },
        
        switchToPulse: function() {
            if (videoContainer) {
                videoContainer.innerHTML = '';
                const pulse = createPulseAnimation();
                videoContainer.appendChild(pulse);
                currentBackground = pulse;
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ CSS –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞');
            }
        },
        
        switchToGradient: function() {
            if (videoContainer) {
                videoContainer.innerHTML = '';
                const gradient = createMedicalGradient();
                videoContainer.appendChild(gradient);
                currentBackground = gradient;
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç');
            }
        },
        
        switchToCanvas: function() {
            if (videoContainer) {
                videoContainer.innerHTML = '';
                const canvas = createCanvasAnimation();
                videoContainer.appendChild(canvas);
                currentBackground = canvas;
                console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Canvas –∞–Ω–∏–º–∞—Ü–∏—é');
            }
        },
        
        restart: function() {
            isInitialized = false;
            initVKSafeBackground();
        }
    };

    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    window.medicalVideoBackground = window.vkSafeBackground;
    window.pexelsMedicalVideo = window.vkSafeBackground;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initVKSafeBackground);
    } else {
        setTimeout(initVKSafeBackground, 100);
    }

    console.log('‚úÖ VK-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–æ–Ω–∞ –≥–æ—Ç–æ–≤–∞');
    console.log('üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: window.vkSafeBackground');

})();
