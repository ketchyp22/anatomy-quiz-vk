// debug.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
(function() {
    'use strict';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –æ—Ç–ª–∞–¥–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ localhost
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(createDebugPanel, 3000);
        });
    }
    
    function createDebugPanel() {
        const debugPanel = document.createElement('div');
        debugPanel.id = 'debug-panel';
        debugPanel.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 15px;
            border-radius: 8px;
            font-family: monospace;
            font-size: 12px;
            z-index: 10000;
            max-width: 300px;
            max-height: 400px;
            overflow-y: auto;
        `;
        
        debugPanel.innerHTML = `
            <div style="font-weight: bold; margin-bottom: 10px;">üêõ Debug Panel</div>
            <div id="debug-content"></div>
            <div style="margin-top: 10px;">
                <button onclick="window.testGamification()" style="margin: 2px; padding: 4px 8px; font-size: 10px;">Test Game</button>
                <button onclick="window.resetGameStats()" style="margin: 2px; padding: 4px 8px; font-size: 10px;">Reset Stats</button>
                <button onclick="window.debugInfo()" style="margin: 2px; padding: 4px 8px; font-size: 10px;">Show Info</button>
                <button onclick="document.getElementById('debug-panel').remove()" style="margin: 2px; padding: 4px 8px; font-size: 10px;">Close</button>
            </div>
        `;
        
        document.body.appendChild(debugPanel);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        setInterval(updateDebugInfo, 2000);
        updateDebugInfo();
    }
    
    function updateDebugInfo() {
        const content = document.getElementById('debug-content');
        if (!content) return;
        
        let info = '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (window.Gamification) {
            info += `‚úÖ Gamification: Loaded<br>`;
            info += `üìä Total Tests: ${window.Gamification.stats.totalQuizzes}<br>`;
            info += `üî• Current Streak: ${window.Gamification.stats.currentStreak}<br>`;
            info += `‚≠ê Best Streak: ${window.Gamification.stats.bestStreak}<br>`;
            info += `üèÜ Achievements: ${window.Gamification.stats.achievements.length}<br>`;
            info += `üîß Initialized: ${window.Gamification.initialized}<br>`;
        } else {
            info += `‚ùå Gamification: Not loaded<br>`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        try {
            const saved = localStorage.getItem('medicalQuizGameStats');
            if (saved) {
                info += `üíæ LocalStorage: OK<br>`;
                const data = JSON.parse(saved);
                info += `üìÑ Saved Tests: ${data.totalQuizzes || 0}<br>`;
            } else {
                info += `üíæ LocalStorage: Empty<br>`;
            }
        } catch (e) {
            info += `‚ùå LocalStorage: Error - ${e.message}<br>`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º VK Bridge
        if (window.vkBridge || window.vkBridgeInstance) {
            info += `‚úÖ VK Bridge: Available<br>`;
        } else {
            info += `‚ùå VK Bridge: Not found<br>`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        const statsEl = document.getElementById('gamification-stats');
        if (statsEl) {
            info += `‚úÖ Stats Display: Visible<br>`;
        } else {
            info += `‚ùå Stats Display: Missing<br>`;
        }
        
        const shareBtn = document.getElementById('share-results');
        if (shareBtn) {
            info += `‚úÖ Share Button: Found<br>`;
        } else {
            info += `‚ùå Share Button: Missing<br>`;
        }
        
        document.getElementById('debug-content').innerHTML = info;
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    window.debugInfo = function() {
        console.group('üêõ Debug Information');
        
        console.log('üìä Gamification Stats:', window.Gamification ? window.Gamification.stats : 'Not loaded');
        
        try {
            const saved = localStorage.getItem('medicalQuizGameStats');
            console.log('üíæ LocalStorage Data:', saved ? JSON.parse(saved) : 'Empty');
        } catch (e) {
            console.error('‚ùå LocalStorage Error:', e);
        }
        
        console.log('üåê VK Bridge:', {
            vkBridge: !!window.vkBridge,
            vkBridgeInstance: !!window.vkBridgeInstance,
            vkBridgeGlobal: typeof vkBridge !== 'undefined'
        });
        
        console.log('üéÆ Integration Status:', {
            gamificationLoaded: !!window.Gamification,
            gamificationInitialized: window.Gamification ? window.Gamification.initialized : false,
            testFunctionAvailable: typeof window.testGamification === 'function',
            resetFunctionAvailable: typeof window.resetGameStats === 'function'
        });
        
        console.groupEnd();
        
        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ alert –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        alert('Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    window.forceSave = function() {
        if (window.Gamification) {
            window.Gamification.saveStats();
            console.log('üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            updateDebugInfo();
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    window.forceLoad = function() {
        if (window.Gamification) {
            window.Gamification.loadStats();
            window.Gamification.updateStatsDisplay();
            console.log('üì• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            updateDebugInfo();
        }
    };
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    window.addEventListener('error', function(e) {
        console.error('üö® JavaScript Error:', e.error);
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º unhandled promises
    window.addEventListener('unhandledrejection', function(e) {
        console.error('üö® Unhandled Promise Rejection:', e.reason);
    });
    
})();
