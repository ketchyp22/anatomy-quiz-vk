// hints-system.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
(function() {
    'use strict';
    
    console.log('üí° –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫...');

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const CONFIG = {
        DAILY_HINTS: 3,
        HINTS_FOR_AD: 1,
        MAX_HINTS: 10,
        STORAGE_KEY: 'hintsData'
    };

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –º–æ–¥—É–ª—è
    window.HintsSystem = {
        hints: 0,
        lastBonusDate: null,
        initialized: false,
        currentQuestionAnswered: false,
        hintUsedForCurrentQuestion: false,
        
        init: function() {
            if (this.initialized) return;
            
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫');
            
            // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
            this.addAnimationStyles();
            
            this.loadData();
            this.createUI();
            this.checkDailyBonus();
            this.attachEventListeners();
            
            this.initialized = true;
        },

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        addAnimationStyles: function() {
            if (document.getElementById('hints-animation-styles')) return;
            
            const style = document.createElement('style');
            style.id = 'hints-animation-styles';
            style.textContent = `
                @keyframes bounceIn {
                    0% {
                        opacity: 0;
                        transform: scale(0.3);
                    }
                    50% {
                        opacity: 1;
                        transform: scale(1.1);
                    }
                    100% {
                        opacity: 1;
                        transform: scale(1);
                    }
                }
                
                .hint-cross {
                    animation: bounceIn 0.6s ease-out !important;
                }
            `;
            document.head.appendChild(style);
        },

        loadData: function() {
            try {
                const savedData = localStorage.getItem(CONFIG.STORAGE_KEY);
                if (savedData) {
                    const data = JSON.parse(savedData);
                    this.hints = data.hints || 0;
                    this.lastBonusDate = data.lastBonusDate || null;
                    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏:', this.hints);
                } else {
                    this.hints = CONFIG.DAILY_HINTS;
                    this.saveData();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
                this.hints = CONFIG.DAILY_HINTS;
            }
        },

        saveData: function() {
            try {
                const data = {
                    hints: this.hints,
                    lastBonusDate: this.lastBonusDate
                };
                localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(data));
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫:', error);
            }
        },

        createUI: function() {
            const hintsContainer = document.createElement('div');
            hintsContainer.id = 'hints-container';
            hintsContainer.className = 'hints-container';
            hintsContainer.innerHTML = `
                <div class="hints-widget">
                    <div class="hints-count">
                        <span class="hints-icon">üí°</span>
                        <span class="hints-number">${this.hints}</span>
                    </div>
                    <button id="use-hint-btn" class="hint-button" style="display: none;">
                        50/50
                    </button>
                </div>
                <button id="daily-bonus-btn" class="daily-bonus-button">
                    <span class="bonus-icon">üéÅ</span>
                </button>
            `;
            
            document.body.appendChild(hintsContainer);
            this.createBonusModal();
            this.createGetHintsModal();
            this.updateUI();
        },

        createBonusModal: function() {
            const bonusModal = document.createElement('div');
            bonusModal.id = 'bonus-modal';
            bonusModal.className = 'bonus-modal';
            bonusModal.innerHTML = `
                <div class="bonus-modal-content">
                    <h2>üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</h2>
                    <div class="bonus-animation">
                        <div class="bonus-gift">üéÅ</div>
                        <div class="bonus-reveal">+${CONFIG.DAILY_HINTS} üí°</div>
                    </div>
                    <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${CONFIG.DAILY_HINTS} –ø–æ–¥—Å–∫–∞–∑–∫–∏!</p>
                    <button id="close-bonus-modal" class="bonus-modal-close">–û—Ç–ª–∏—á–Ω–æ!</button>
                </div>
            `;
            
            document.body.appendChild(bonusModal);
        },

        createGetHintsModal: function() {
            const getHintsModal = document.createElement('div');
            getHintsModal.id = 'get-hints-modal';
            getHintsModal.className = 'hints-modal';
            getHintsModal.innerHTML = `
                <div class="hints-modal-content">
                    <h3>üí° –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∏!</h3>
                    <p>–ü–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:</p>
                    <div class="hints-options">
                        <button id="watch-ad-btn" class="hints-option-btn">
                            <span class="option-icon">üì∫</span>
                            <span class="option-text">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É</span>
                            <span class="option-reward">+${CONFIG.HINTS_FOR_AD} –ø–æ–¥—Å–∫–∞–∑–∫–∞</span>
                        </button>
                        <button id="wait-bonus-btn" class="hints-option-btn">
                            <span class="option-icon">‚è∞</span>
                            <span class="option-text">–ñ–¥–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞</span>
                            <span class="option-reward">+${CONFIG.DAILY_HINTS} –ø–æ–¥—Å–∫–∞–∑–æ–∫</span>
                        </button>
                    </div>
                    <button id="close-hints-modal" class="hints-modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
            
            document.body.appendChild(getHintsModal);
        },

        updateUI: function() {
            const hintsNumber = document.querySelector('.hints-number');
            const hintButton = document.getElementById('use-hint-btn');
            
            if (hintsNumber) {
                hintsNumber.textContent = this.hints;
                hintsNumber.classList.add('hints-updated');
                setTimeout(() => hintsNumber.classList.remove('hints-updated'), 300);
            }
            
            if (hintButton) {
                const inQuiz = document.getElementById('quiz-container')?.style.display !== 'none';
                const hasHints = this.hints > 0;
                const canUseHint = inQuiz && hasHints && !this.currentQuestionAnswered && !this.hintUsedForCurrentQuestion;
                
                hintButton.style.display = canUseHint ? 'block' : 'none';
                hintButton.disabled = !canUseHint;
            }
        },

        checkDailyBonus: function() {
            const today = new Date().toDateString();
            const bonusButton = document.getElementById('daily-bonus-btn');
            
            if (!bonusButton) return;
            
            if (this.lastBonusDate !== today) {
                bonusButton.classList.add('bonus-available');
                bonusButton.title = '–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!';
            } else {
                bonusButton.classList.remove('bonus-available');
                bonusButton.title = '–ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è';
            }
        },

        collectDailyBonus: function() {
            const today = new Date().toDateString();
            
            if (this.lastBonusDate === today) {
                this.showNotification('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ üéÅ');
                return;
            }
            
            this.lastBonusDate = today;
            this.hints = Math.min(this.hints + CONFIG.DAILY_HINTS, CONFIG.MAX_HINTS);
            this.saveData();
            
            this.showBonusModal();
            this.updateUI();
            this.checkDailyBonus();
            
            console.log('üéÅ –ü–æ–ª—É—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!');
        },

        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
        getCurrentQuestionData: function() {
            // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ app.js
            if (window.getCurrentQuestionData && typeof window.getCurrentQuestionData === 'function') {
                const data = window.getCurrentQuestionData();
                if (data) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ window.getCurrentQuestionData:', data);
                    return data;
                }
            }
            
            // –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
            if (window.questionsForQuiz && typeof window.currentQuestion !== 'undefined') {
                const question = window.questionsForQuiz[window.currentQuestion];
                if (question) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é:', question);
                    return question;
                }
            }
            
            // –°–ø–æ—Å–æ–± 3: –ß–µ—Ä–µ–∑ DOM –ø–æ–∏—Å–∫
            const questionText = document.getElementById('question')?.textContent;
            if (questionText && window.questions) {
                const foundQuestion = window.questions.find(q => q.text === questionText);
                if (foundQuestion) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É:', foundQuestion);
                    return foundQuestion;
                }
            }
            
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
            return null;
        },

        // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        useHint: function() {
            console.log('üí° –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É...');
            
            if (this.hints <= 0) {
                console.log('‚ùå –ù–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫');
                this.showGetHintsModal();
                return;
            }
            
            if (this.currentQuestionAnswered) {
                console.log('‚ùå –£–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å');
                this.showNotification('–ü–æ–¥—Å–∫–∞–∑–∫—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ –æ—Ç–≤–µ—Ç–∞!');
                return;
            }
            
            if (this.hintUsedForCurrentQuestion) {
                console.log('‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
                this.showNotification('–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            const options = document.querySelectorAll('.option');
            console.log('üîç –ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤:', options.length);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
            const questionData = this.getCurrentQuestionData();
            if (!questionData) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞');
                this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
                return;
            }
            
            const correctIndex = questionData.correctOptionIndex;
            console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:', correctIndex);
            
            if (correctIndex === undefined || correctIndex < 0 || correctIndex >= options.length) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', correctIndex);
                this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            const wrongIndices = [];
            for (let i = 0; i < options.length; i++) {
                if (i !== correctIndex) {
                    wrongIndices.push(i);
                }
            }
            
            console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:', wrongIndices);
            
            if (wrongIndices.length < 2) {
                console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ 50/50');
                this.showNotification('–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ 50/50');
                return;
            }
            
            // –î–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ 50/50 –≤—Å–µ–≥–¥–∞ —É–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ 2 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
            const toHideCount = Math.min(2, wrongIndices.length);
            const toHide = this.shuffleArray(wrongIndices).slice(0, toHideCount);
            console.log('üö´ –°–∫—Ä—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã:', toHide);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            this.applyHintAnimation(options, toHide);
            
            // –°–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            this.hints--;
            this.hintUsedForCurrentQuestion = true;
            this.saveData();
            this.updateUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this.showHintAnimation();
            
            console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ 50/50 —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞');
            console.log('üí° –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥—Å–∫–∞–∑–æ–∫:', this.hints);
        },

        // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        applyHintAnimation: function(options, toHide) {
            console.log('üé¨ –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', toHide);
            
            toHide.forEach((index, animationDelay) => {
                setTimeout(() => {
                    const option = options[index];
                    console.log(`üö´ –°–∫—Ä—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ${index}:`, option.textContent);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    option.classList.add('hint-disabled');
                    option.style.cssText = `
                        background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%) !important;
                        color: #991b1b !important;
                        cursor: not-allowed !important;
                        border: 2px dashed #f87171 !important;
                        opacity: 0.6 !important;
                        transform: scale(0.95) !important;
                        pointer-events: none !important;
                        text-decoration: line-through !important;
                        transition: all 0.3s ease !important;
                        position: relative !important;
                    `;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ—Å—Ç–∏–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if (!option.querySelector('.hint-cross')) {
                        const cross = document.createElement('span');
                        cross.className = 'hint-cross';
                        cross.innerHTML = ' ‚ùå';
                        cross.style.cssText = `
                            float: right !important;
                            color: #dc2626 !important;
                            font-weight: bold !important;
                            font-size: 20px !important;
                            animation: bounceIn 0.6s ease-out !important;
                            text-decoration: none !important;
                            margin-left: 10px !important;
                        `;
                        option.appendChild(cross);
                    }
                }, animationDelay * 300); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            });
        },

        showBonusModal: function() {
            const modal = document.getElementById('bonus-modal');
            if (!modal) return;
            
            modal.classList.add('show');
            
            setTimeout(() => {
                const gift = modal.querySelector('.bonus-gift');
                const reveal = modal.querySelector('.bonus-reveal');
                if (gift) gift.classList.add('open');
                if (reveal) reveal.classList.add('show');
            }, 300);
        },

        showGetHintsModal: function() {
            const modal = document.getElementById('get-hints-modal');
            if (modal) {
                modal.classList.add('show');
            }
        },

        showHintAnimation: function() {
            const animation = document.createElement('div');
            animation.className = 'hint-use-animation';
            animation.innerHTML = 'üí° 50/50';
            animation.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                font-size: 48px;
                font-weight: bold;
                color: #f59e0b;
                opacity: 0;
                z-index: 3000;
                transition: all 0.3s ease;
                text-shadow: 0 4px 20px rgba(245, 158, 11, 0.5);
            `;
            
            document.body.appendChild(animation);
            
            setTimeout(() => {
                animation.style.opacity = '1';
                animation.style.transform = 'translate(-50%, -50%) scale(1.2)';
            }, 10);
            
            setTimeout(() => {
                animation.style.opacity = '0';
                animation.style.transform = 'translate(-50%, -50%) scale(0.8)';
                setTimeout(() => animation.remove(), 300);
            }, 1000);
        },

        showNotification: function(text) {
            const notification = document.createElement('div');
            notification.className = 'hints-notification';
            notification.textContent = text;
            notification.style.cssText = `
                position: fixed;
                bottom: 30px;
                left: 50%;
                transform: translateX(-50%) translateY(100px);
                background: rgba(0, 0, 0, 0.9);
                color: white;
                padding: 15px 25px;
                border-radius: 10px;
                font-weight: 500;
                z-index: 3000;
                transition: transform 0.3s ease;
                max-width: 90%;
                text-align: center;
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(-50%) translateY(0)';
            }, 10);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(-50%) translateY(100px)';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        },

        attachEventListeners: function() {
            document.addEventListener('click', (e) => {
                if (e.target && e.target.id === 'use-hint-btn') {
                    e.preventDefault();
                    e.stopPropagation();
                    this.useHint();
                }
                
                if (e.target && (e.target.id === 'daily-bonus-btn' || e.target.closest('#daily-bonus-btn'))) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.collectDailyBonus();
                }
                
                if (e.target && e.target.id === 'close-bonus-modal') {
                    document.getElementById('bonus-modal').classList.remove('show');
                }
                
                if (e.target && e.target.id === 'close-hints-modal') {
                    document.getElementById('get-hints-modal').classList.remove('show');
                }
                
                if (e.target && e.target.id === 'watch-ad-btn') {
                    this.watchAdForHints();
                }
            });
            
            document.addEventListener('quizStarted', () => {
                console.log('üéÆ –ö–≤–∏–∑ –Ω–∞—á–∞–ª—Å—è');
                this.updateUI();
            });
            
            document.addEventListener('questionLoaded', () => {
                console.log('‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∂–µ–Ω');
                this.currentQuestionAnswered = false;
                this.hintUsedForCurrentQuestion = false;
                this.updateUI();
            });
            
            document.addEventListener('answerSelected', () => {
                console.log('‚úã –û—Ç–≤–µ—Ç –≤—ã–±—Ä–∞–Ω');
                this.currentQuestionAnswered = true;
                this.updateUI();
            });
            
            document.addEventListener('quizCompleted', () => {
                console.log('üèÅ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
                const hintButton = document.getElementById('use-hint-btn');
                if (hintButton) {
                    hintButton.style.display = 'none';
                }
            });
        },

        watchAdForHints: async function() {
            const bridge = window.vkBridgeInstance || window.vkBridge;
            
            if (!bridge) {
                this.showNotification('–†–µ–∫–ª–∞–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç');
                return;
            }
            
            try {
                const result = await bridge.send('VKWebAppShowNativeAds', {
                    ad_format: 'reward'
                });
                
                if (result.result) {
                    this.hints = Math.min(this.hints + CONFIG.HINTS_FOR_AD, CONFIG.MAX_HINTS);
                    this.saveData();
                    this.updateUI();
                    
                    this.showNotification(`–ü–æ–ª—É—á–µ–Ω–∞ ${CONFIG.HINTS_FOR_AD} –ø–æ–¥—Å–∫–∞–∑–∫–∞!`);
                    document.getElementById('get-hints-modal').classList.remove('show');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
                this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–ª–∞–º—É');
            }
        },

        shuffleArray: function(array) {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        },

        resetHintState: function() {
            this.currentQuestionAnswered = false;
            this.hintUsedForCurrentQuestion = false;
            this.updateUI();
            console.log('üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ');
        },

        addHints: function(count = 1) {
            this.hints = Math.min(this.hints + count, CONFIG.MAX_HINTS);
            this.saveData();
            this.updateUI();
            console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ ${count} –ø–æ–¥—Å–∫–∞–∑–æ–∫. –í—Å–µ–≥–æ: ${this.hints}`);
        }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(() => {
            window.HintsSystem.init();
        }, 500);
    });

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.debugHints = {
        useHint: () => window.HintsSystem.useHint(),
        addHints: (count) => window.HintsSystem.addHints(count),
        resetState: () => window.HintsSystem.resetHintState(),
        getState: () => ({
            hints: window.HintsSystem.hints,
            currentQuestionAnswered: window.HintsSystem.currentQuestionAnswered,
            hintUsedForCurrentQuestion: window.HintsSystem.hintUsedForCurrentQuestion,
            initialized: window.HintsSystem.initialized
        }),
        checkQuestionData: () => {
            return window.HintsSystem.getCurrentQuestionData();
        },
        forceUseHint: () => {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const options = document.querySelectorAll('.option');
            if (options.length >= 3) {
                const toHide = [0, 2]; // –°–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
                window.HintsSystem.applyHintAnimation(options, toHide);
                window.HintsSystem.showHintAnimation();
                console.log('üß™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            }
        }
    };

    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üêõ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: window.debugHints');

})();
