// vk-share-correct.js - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –ø—Ä–æ–±–ª–µ–º—ã —Å GitHub —Å—Å—ã–ª–∫–∞–º–∏
(function() {
    'use strict';
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ VK Share –±–µ–∑ GitHub —Å—Å—ã–ª–æ–∫...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(initCorrectVKShare, 1000);
    });

    function initCorrectVKShare() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ VK Share');
        
        const shareButton = document.getElementById('share-results');
        if (!shareButton) {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        shareButton.innerHTML = 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º';

        // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        shareButton.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('üì§ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ - –¥–µ–ª–∏–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º');
            showShareOptions();
        };
        
        console.log('‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ VK Share –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    function showShareOptions() {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        const results = getTestResults();
        if (!results) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞');
            showTextOnlyShare();
            return;
        }

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞:', results);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —à–µ—Ä–∏–Ω–≥–∞
        showShareModal(results);
    }

    function showShareModal(results) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —à–µ—Ä–∏–Ω–≥–∞
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
        `;
        
        const dialog = document.createElement('div');
        dialog.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            animation: slideIn 0.3s ease;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            text-align: center;
        `;
        
        dialog.innerHTML = `
            <div style="margin-bottom: 25px;">
                <h3 style="margin: 0 0 10px 0; color: #333; font-size: 24px;">
                    üéâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                </h3>
                <div style="font-size: 48px; margin: 15px 0; color: #10B981;">
                    ${getEmoji(results.percentage)} ${results.percentage}%
                </div>
                <p style="color: #666; margin: 0;">
                    ${results.correct} –∏–∑ ${results.total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                </p>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 15px; margin-bottom: 20px;">
                <button id="share-story" style="
                    padding: 15px 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.2s;
                ">
                    üì∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
                </button>
                
                <button id="share-text-only" style="
                    padding: 15px 20px;
                    background: linear-gradient(135deg, #4267B2 0%, #365899 100%);
                    color: white;
                    border: none;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.2s;
                ">
                    üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–º
                </button>
                
                <button id="copy-result" style="
                    padding: 12px 20px;
                    background: #f8f9fa;
                    color: #333;
                    border: 1px solid #dee2e6;
                    border-radius: 12px;
                    font-size: 14px;
                    cursor: pointer;
                    transition: transform 0.2s;
                ">
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                </button>
            </div>
            
            <button id="close-share" style="
                width: 100%;
                padding: 12px;
                background: #6c757d;
                color: white;
                border: none;
                border-radius: 10px;
                cursor: pointer;
            ">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            @keyframes slideIn {
                from { transform: translateY(-50px); opacity: 0; }
                to { transform: translateY(0); opacity: 1; }
            }
        `;
        document.head.appendChild(style);
        
        modal.appendChild(dialog);
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        dialog.querySelector('#share-story').onclick = () => {
            closeModal();
            shareToStory(results);
        };
        
        dialog.querySelector('#share-text-only').onclick = () => {
            closeModal();
            shareTextOnly(results);
        };
        
        dialog.querySelector('#copy-result').onclick = () => {
            copyResultText(results);
        };
        
        dialog.querySelector('#close-share').onclick = closeModal;
        modal.onclick = (e) => {
            if (e.target === modal) closeModal();
        };
        
        function closeModal() {
            modal.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
                if (style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            }, 300);
        }
    }

    async function shareToStory(results) {
        console.log('üì∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ VK (–±–µ–∑ —Å—Å—ã–ª–æ–∫)');
        
        const bridge = getBridge();
        if (!bridge) {
            showTextOnlyShare();
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ë–ï–ó —Å—Å—ã–ª–æ–∫
            const storyParams = {
                background_type: 'color',
                background_color: '#667eea',
                stickers: [
                    {
                        sticker_type: 'native',
                        sticker: {
                            action_type: 'text',
                            action: {
                                text: `–ü—Ä–æ—à–µ–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑! ü©∫\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${results.percentage}%\n${results.correct} –∏–∑ ${results.total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö\n\n${getMotivationText(results.percentage)}`,
                                style: 'classic',
                                background_style: 'solid',
                                selection_color: '#5a67d8'
                            },
                            transform: {
                                gravity: 'center',
                                relation_width: 0.9
                            }
                        }
                    }
                ]
            };

            const response = await bridge.send('VKWebAppShowStoryBox', storyParams);
            
            if (response.result) {
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
                showSuccessMessage('üì∏ –†–µ–¥–∞–∫—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–π –æ—Ç–∫—Ä—ã—Ç!');
                
                // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∑–∞ —à–µ—Ä–∏–Ω–≥
                rewardForSharing();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            
            if (error.error_type === 'client_error' && error.error_data?.error_reason === 'User denied') {
                showSuccessMessage('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            } else {
                showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                setTimeout(() => shareTextOnly(results), 1000);
            }
        }
    }

    async function shareTextOnly(results) {
        console.log('üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Å—Å—ã–ª–æ–∫)');
        
        const bridge = getBridge();
        if (!bridge) {
            showTextOnlyShare();
            return;
        }

        try {
            const shareText = createShareText(results, false); // –ë–ï–ó –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            
            // –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´: –∏—Å–ø–æ–ª—å–∑—É–µ–º VKWebAppShare —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –ë–ï–ó link
            const shareParams = {
                text: shareText
                // –í–ê–ñ–ù–û: –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä link! 
                // –ï—Å–ª–∏ link –Ω–µ —É–∫–∞–∑–∞–Ω, VK –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω (GitHub)
                // –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ text
            };

            console.log('üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è VKWebAppShare (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç):', shareParams);

            const response = await bridge.send('VKWebAppShare', shareParams);
            
            if (response && response.type) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response);
                
                if (response.type === 'message' && response.users) {
                    showSuccessMessage(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${response.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`);
                } else if (response.type === 'story') {
                    showSuccessMessage('üì∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏!');
                }
                
                // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –∑–∞ —à–µ—Ä–∏–Ω–≥
                rewardForSharing();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            
            if (error.error_type === 'client_error' && error.error_data?.error_reason === 'User denied') {
                showSuccessMessage('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            } else {
                showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback
                setTimeout(() => showTextOnlyShare(), 1000);
            }
        }
    }

    function copyResultText(results) {
        const text = createShareText(results, true); // –° –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
        
        try {
            // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                }).catch(() => {
                    fallbackCopy(text);
                });
            } else {
                fallbackCopy(text);
            }
        } catch (error) {
            fallbackCopy(text);
        }
    }

    function fallbackCopy(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        } catch (err) {
            showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        }
        
        document.body.removeChild(textArea);
    }

    function getTestResults() {
        try {
            // –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const percentageEl = document.getElementById('percentage');
            const correctEl = document.getElementById('correct-answers');
            const totalEl = document.getElementById('total-questions-result');
            
            if (percentageEl && correctEl && totalEl) {
                const percentage = parseInt(percentageEl.textContent) || 0;
                const correct = parseInt(correctEl.textContent) || 0;
                const total = parseInt(totalEl.textContent) || 0;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                const modeEl = document.getElementById('mode-badge');
                const difficultyEl = document.getElementById('difficulty-badge');
                
                return {
                    percentage,
                    correct,
                    total,
                    mode: modeEl ? modeEl.textContent : '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑',
                    difficulty: difficultyEl ? difficultyEl.textContent : '–û–±—ã—á–Ω—ã–π'
                };
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            return null;
        }
    }

    function createShareText(results, includeCallToAction = false) {
        const emoji = getEmoji(results.percentage);
        const grade = getGrade(results.percentage);
        
        let text = `${emoji} ${grade}! –ü—Ä–æ—à–µ–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑ –∏ –Ω–∞–±—Ä–∞–ª ${results.percentage}%!\n\n`;
        text += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correct} –∏–∑ ${results.total}\n`;
        text += `üìã –†–µ–∂–∏–º: ${results.mode}\n`;
        text += `üéØ –£—Ä–æ–≤–µ–Ω—å: ${results.difficulty}\n\n`;
        text += getMotivationText(results.percentage);
        
        if (includeCallToAction) {
            text += '\n\nü©∫ –ê —Ç—ã —Å–º–æ–∂–µ—à—å –ª—É—á—à–µ? –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è!';
        }
        
        return text;
    }

    function getBridge() {
        return window.vkBridgeInstance || window.vkBridge || (typeof vkBridge !== 'undefined' ? vkBridge : null);
    }

    function showTextOnlyShare() {
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º');
        
        const results = getTestResults();
        if (!results) return;
        
        const text = createShareText(results, true);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
        `;
        
        const dialog = document.createElement('div');
        dialog.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            text-align: center;
        `;
        
        dialog.innerHTML = `
            <h3 style="margin: 0 0 20px 0; color: #333;">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</h3>
            <p style="color: #666; margin-bottom: 15px;">
                –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –≤ VK –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:
            </p>
            <textarea readonly style="
                width: 100%; 
                height: 120px; 
                padding: 15px; 
                border: 1px solid #ddd; 
                border-radius: 10px; 
                font-size: 14px; 
                resize: none; 
                margin-bottom: 20px;
            ">${text}</textarea>
            <button onclick="copyToClipboard('${text.replace(/'/g, "\\'")}');" style="
                background: #5a67d8; 
                color: white; 
                border: none; 
                padding: 12px 24px; 
                border-radius: 10px; 
                cursor: pointer; 
                margin-right: 10px;
            ">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            <button onclick="this.parentElement.parentElement.remove();" style="
                background: #6c757d; 
                color: white; 
                border: none; 
                padding: 12px 24px; 
                border-radius: 10px; 
                cursor: pointer;
            ">–ó–∞–∫—Ä—ã—Ç—å</button>
        `;
        
        modal.appendChild(dialog);
        document.body.appendChild(modal);
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) modal.remove();
        });
    }

    function rewardForSharing() {
        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —à–µ—Ä–∏–Ω–≥
        if (window.Gamification && window.Gamification.stats) {
            const stats = window.Gamification.stats;
            
            if (!stats.achievements.includes('social_share')) {
                stats.achievements.push('social_share');
                setTimeout(() => {
                    if (window.Gamification.showAchievement) {
                        window.Gamification.showAchievement('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø–æ–¥–µ–ª–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! üì§');
                    }
                }, 1000);
                
                if (window.Gamification.saveStats) {
                    window.Gamification.saveStats();
                }
            }
        }
    }

    function getEmoji(percentage) {
        if (percentage >= 95) return 'üèÜ';
        if (percentage >= 85) return 'üåü';
        if (percentage >= 75) return 'üëè';
        if (percentage >= 60) return 'üëç';
        if (percentage >= 50) return 'üìö';
        return 'üí™';
    }
    
    function getGrade(percentage) {
        if (percentage >= 95) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ';
        if (percentage >= 85) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 75) return '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ';
        if (percentage >= 60) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 50) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏';
    }
    
    function getMotivationText(percentage) {
        if (percentage >= 90) {
            return 'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!';
        } else if (percentage >= 70) {
            return 'üëè –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π!';
        } else if (percentage >= 50) {
            return 'üìö –ï—Å—Ç—å –±–∞–∑–∞, –Ω–æ –º–æ–∂–Ω–æ –µ—â–µ –ø–æ–¥—É—á–∏—Ç—å—Å—è!';
        } else {
            return 'üí™ –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—É!';
        }
    }

    function showSuccessMessage(text) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #10B981;
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            z-index: 10001;
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.4);
            max-width: 300px;
            line-height: 1.4;
            animation: slideInRight 0.3s ease;
        `;
        
        notification.textContent = text;
        
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
                @keyframes fadeOut {
                    from { opacity: 1; }
                    to { opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ showTextOnlyShare)
    window.copyToClipboard = function(text) {
        try {
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                });
            } else {
                fallbackCopy(text);
            }
        } catch (error) {
            fallbackCopy(text);
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.debugVKShare = {
        testShare: () => {
            console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º VK —à–µ—Ä–∏–Ω–≥...');
            showShareOptions();
        },
        
        testStory: () => {
            const results = getTestResults() || { percentage: 85, correct: 8, total: 10, mode: '–¢–µ—Å—Ç', difficulty: '–û–±—ã—á–Ω—ã–π' };
            shareToStory(results);
        },
        
        testTextOnly: () => {
            const results = getTestResults() || { percentage: 85, correct: 8, total: 10, mode: '–¢–µ—Å—Ç', difficulty: '–û–±—ã—á–Ω—ã–π' };
            shareTextOnly(results);
        },
        
        getResults: () => {
            return getTestResults();
        },
        
        checkBridge: () => {
            const bridge = getBridge();
            console.log('VK Bridge –¥–æ—Å—Ç—É–ø–µ–Ω:', !!bridge);
            return !!bridge;
        }
    };

    console.log('‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ VK Share –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    console.log('üêõ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: window.debugVKShare');
    
})();
