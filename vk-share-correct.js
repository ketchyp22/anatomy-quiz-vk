// vk-share-fixed.js - –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï —à–µ—Ä–∏–Ω–≥–∞ –¥–ª—è VK –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
(function() {
    'use strict';
    
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π VK Share –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–∫—Ä—É–∂–µ–Ω–∏—è
    function detectEnvironment() {
        const url = window.location.href;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ VK
        if (url.includes('vk.com/app') || url.includes('vk.com/apps')) {
            return 'vk_app';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VK Bridge
        const bridge = window.vkBridgeInstance || window.vkBridge || (typeof vkBridge !== 'undefined' ? vkBridge : null);
        if (bridge) {
            return 'vk_mobile';
        }
        
        // GitHub –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç–∏–Ω–≥
        if (url.includes('github.io') || url.includes('localhost')) {
            return 'external';
        }
        
        return 'unknown';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(initVKShare, 1000);
    });

    function initVKShare() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VK Share');
        
        const environment = detectEnvironment();
        console.log('üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:', environment);
        
        const shareButton = document.getElementById('share-results');
        if (!shareButton) {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        shareButton.innerHTML = 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º';
        shareButton.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('üì§ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ - –æ–∫—Ä—É–∂–µ–Ω–∏–µ:', environment);
            
            if (environment === 'external') {
                // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ –≤ VK - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                showCopyOnlyOption();
            } else {
                // –ï—Å–ª–∏ –≤ VK - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                showVKShareOptions();
            }
        };
        
        console.log('‚úÖ VK Share –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:', environment);
    }

    function showVKShareOptions() {
        const results = getTestResults();
        if (!results) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞');
            showCopyOnlyOption();
            return;
        }

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è VK —à–µ—Ä–∏–Ω–≥–∞:', results);
        showVKShareModal(results);
    }

    function showVKShareModal(results) {
        const modal = createModal(`
            <div style="margin-bottom: 25px;">
                <h3 style="margin: 0 0 10px 0; color: #333; font-size: 24px;">
                    üéâ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK
                </h3>
                <div style="font-size: 48px; margin: 15px 0; color: #10B981;">
                    ${getEmoji(results.percentage)} ${results.percentage}%
                </div>
                <p style="color: #666; margin: 0;">
                    ${results.correct} –∏–∑ ${results.total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                </p>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 15px; margin-bottom: 20px;">
                <button id="share-vk-post" style="
                    padding: 15px 20px;
                    background: linear-gradient(135deg, #4267B2 0%, #365899 100%);
                    color: white;
                    border: none;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                ">
                    üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å
                </button>
                
                <button id="share-vk-message" style="
                    padding: 15px 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    border-radius: 12px;
                    font-size: 16px;
                    font-weight: 600;
                    cursor: pointer;
                ">
                    üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
                
                <button id="copy-text" style="
                    padding: 12px 20px;
                    background: #f8f9fa;
                    color: #333;
                    border: 1px solid #dee2e6;
                    border-radius: 12px;
                    font-size: 14px;
                    cursor: pointer;
                ">
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                </button>
            </div>
            
            <button id="close-modal" style="
                width: 100%;
                padding: 12px;
                background: #6c757d;
                color: white;
                border: none;
                border-radius: 10px;
                cursor: pointer;
            ">
                –ó–∞–∫—Ä—ã—Ç—å
            </button>
        `);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('#share-vk-post').onclick = () => {
            closeModal(modal);
            shareVKPost(results);
        };
        
        modal.querySelector('#share-vk-message').onclick = () => {
            closeModal(modal);
            shareVKMessage(results);
        };
        
        modal.querySelector('#copy-text').onclick = () => {
            copyResultText(results);
        };
        
        modal.querySelector('#close-modal').onclick = () => closeModal(modal);
    }

    function showCopyOnlyOption() {
        console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–Ω–µ—à–Ω–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ)');
        
        const results = getTestResults();
        if (!results) return;
        
        const text = createShareText(results, true);
        
        const modal = createModal(`
            <h3 style="margin: 0 0 20px 0; color: #333;">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</h3>
            <p style="color: #666; margin-bottom: 15px;">
                –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º –≤ VK –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:
            </p>
            <textarea readonly id="share-text" style="
                width: 100%; 
                height: 120px; 
                padding: 15px; 
                border: 1px solid #ddd; 
                border-radius: 10px; 
                font-size: 14px; 
                resize: none; 
                margin-bottom: 20px;
                font-family: inherit;
            ">${text}</textarea>
            <div style="display: flex; gap: 10px;">
                <button onclick="copyToClipboard('${text.replace(/'/g, "\\'")}');" style="
                    flex: 1;
                    background: #5a67d8; 
                    color: white; 
                    border: none; 
                    padding: 12px 24px; 
                    border-radius: 10px; 
                    cursor: pointer;
                ">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                <button id="close-modal" style="
                    flex: 1;
                    background: #6c757d; 
                    color: white; 
                    border: none; 
                    padding: 12px 24px; 
                    border-radius: 10px; 
                    cursor: pointer;
                ">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        `);
        
        modal.querySelector('#close-modal').onclick = () => closeModal(modal);
        
        // –ê–≤—Ç–æ–≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ textarea
        modal.querySelector('#share-text').onclick = function() {
            this.select();
        };
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ VK
    async function shareVKPost(results) {
        console.log('üìù –ü—É–±–ª–∏–∫—É–µ–º –∑–∞–ø–∏—Å—å –≤ VK (–ë–ï–ó —Å—Å—ã–ª–∫–∏ –Ω–∞ GitHub)');
        
        const bridge = getBridge();
        if (!bridge) {
            showCopyOnlyOption();
            return;
        }

        try {
            const shareText = createShareText(results, false);
            
            // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º VKWebAppShowWallPostBox –≤–º–µ—Å—Ç–æ VKWebAppShare
            const response = await bridge.send('VKWebAppShowWallPostBox', {
                message: shareText
                // –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫!
            });
            
            if (response.post_id) {
                console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:', response);
                showSuccessMessage('üìù –ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–∞ —Å—Ç–µ–Ω–µ!');
                rewardForSharing();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
            
            if (error.error_type === 'client_error' && error.error_data?.error_reason === 'User denied') {
                showSuccessMessage('‚ÑπÔ∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            } else {
                showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å');
                setTimeout(() => shareVKMessage(results), 1000);
            }
        }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    async function shareVKMessage(results) {
        console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ VK (–ë–ï–ó —Å—Å—ã–ª–∫–∏)');
        
        const bridge = getBridge();
        if (!bridge) {
            showCopyOnlyOption();
            return;
        }

        try {
            const shareText = createShareText(results, false);
            
            // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º VKWebAppShare —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            const response = await bridge.send('VKWebAppShare', {
                text: shareText
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä link!
            });
            
            if (response && response.type) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response);
                
                if (response.type === 'message' && response.users) {
                    showSuccessMessage(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${response.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!`);
                } else {
                    showSuccessMessage('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                }
                
                rewardForSharing();
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            
            if (error.error_type === 'client_error' && error.error_data?.error_reason === 'User denied') {
                showSuccessMessage('‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
            } else {
                showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
                setTimeout(() => showCopyOnlyOption(), 1000);
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function createModal(content) {
        const modal = document.createElement('div');
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease;
        `;
        
        const dialog = document.createElement('div');
        dialog.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 400px;
            width: 90%;
            animation: slideIn 0.3s ease;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            text-align: center;
        `;
        
        dialog.innerHTML = content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        if (!document.getElementById('modal-styles')) {
            const style = document.createElement('style');
            style.id = 'modal-styles';
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                @keyframes slideIn {
                    from { transform: translateY(-50px); opacity: 0; }
                    to { transform: translateY(0); opacity: 1; }
                }
                @keyframes fadeOut {
                    from { opacity: 1; }
                    to { opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
        
        modal.appendChild(dialog);
        document.body.appendChild(modal);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.onclick = (e) => {
            if (e.target === modal) closeModal(modal);
        };
        
        return dialog;
    }

    function closeModal(modal) {
        const modalElement = modal.closest ? modal.closest('[style*="position: fixed"]') : modal.parentElement;
        if (modalElement) {
            modalElement.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => {
                if (modalElement.parentNode) {
                    modalElement.parentNode.removeChild(modalElement);
                }
            }, 300);
        }
    }

    function getTestResults() {
        try {
            const percentageEl = document.getElementById('percentage');
            const correctEl = document.getElementById('correct-answers');
            const totalEl = document.getElementById('total-questions-result');
            
            if (percentageEl && correctEl && totalEl) {
                const percentage = parseInt(percentageEl.textContent) || 0;
                const correct = parseInt(correctEl.textContent) || 0;
                const total = parseInt(totalEl.textContent) || 0;
                
                const modeEl = document.getElementById('mode-badge');
                const difficultyEl = document.getElementById('difficulty-badge');
                
                return {
                    percentage,
                    correct,
                    total,
                    mode: modeEl ? modeEl.textContent : '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑',
                    difficulty: difficultyEl ? difficultyEl.textContent : '–û–±—ã—á–Ω—ã–π'
                };
            }
            
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            return null;
        }
    }

    function createShareText(results, includeCallToAction = false) {
        const emoji = getEmoji(results.percentage);
        const grade = getGrade(results.percentage);
        
        let text = `${emoji} ${grade}! –ü—Ä–æ—à–µ–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑ –∏ –Ω–∞–±—Ä–∞–ª ${results.percentage}%!\n\n`;
        text += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correct} –∏–∑ ${results.total}\n`;
        text += `üìã –†–µ–∂–∏–º: ${results.mode}\n`;
        text += `üéØ –£—Ä–æ–≤–µ–Ω—å: ${results.difficulty}\n\n`;
        text += getMotivationText(results.percentage);
        
        if (includeCallToAction) {
            text += '\n\nü©∫ –ê —Ç—ã —Å–º–æ–∂–µ—à—å –ª—É—á—à–µ? –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –≤ MedQuiz Pro!';
        }
        
        return text;
    }

    function copyResultText(results) {
        const text = createShareText(results, true);
        
        try {
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                }).catch(() => {
                    fallbackCopy(text);
                });
            } else {
                fallbackCopy(text);
            }
        } catch (error) {
            fallbackCopy(text);
        }
    }

    function fallbackCopy(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        } catch (err) {
            showSuccessMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        }
        
        document.body.removeChild(textArea);
    }

    function getBridge() {
        return window.vkBridgeInstance || window.vkBridge || (typeof vkBridge !== 'undefined' ? vkBridge : null);
    }

    function rewardForSharing() {
        if (window.Gamification && window.Gamification.stats) {
            const stats = window.Gamification.stats;
            
            if (!stats.achievements.includes('social_share')) {
                stats.achievements.push('social_share');
                setTimeout(() => {
                    if (window.Gamification.showAchievement) {
                        window.Gamification.showAchievement('–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø–æ–¥–µ–ª–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! üì§');
                    }
                }, 1000);
                
                if (window.Gamification.saveStats) {
                    window.Gamification.saveStats();
                }
            }
        }
    }

    function getEmoji(percentage) {
        if (percentage >= 95) return 'üèÜ';
        if (percentage >= 85) return 'üåü';
        if (percentage >= 75) return 'üëè';
        if (percentage >= 60) return 'üëç';
        if (percentage >= 50) return 'üìö';
        return 'üí™';
    }
    
    function getGrade(percentage) {
        if (percentage >= 95) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ';
        if (percentage >= 85) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 75) return '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ';
        if (percentage >= 60) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 50) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏';
    }
    
    function getMotivationText(percentage) {
        if (percentage >= 90) {
            return 'üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!';
        } else if (percentage >= 70) {
            return 'üëè –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π!';
        } else if (percentage >= 50) {
            return 'üìö –ï—Å—Ç—å –±–∞–∑–∞, –Ω–æ –º–æ–∂–Ω–æ –µ—â–µ –ø–æ–¥—É—á–∏—Ç—å—Å—è!';
        } else {
            return 'üí™ –ù–∞—á–∞–ª–æ –ø–æ–ª–æ–∂–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—É!';
        }
    }

    function showSuccessMessage(text) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #10B981;
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            z-index: 10001;
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.4);
            max-width: 300px;
            line-height: 1.4;
            animation: slideInRight 0.3s ease;
        `;
        
        notification.textContent = text;
        
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    window.copyToClipboard = function(text) {
        try {
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(text).then(() => {
                    showSuccessMessage('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                });
            } else {
                fallbackCopy(text);
            }
        } catch (error) {
            fallbackCopy(text);
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.debugVKShare = {
        detectEnv: detectEnvironment,
        testShare: showVKShareOptions,
        testCopy: showCopyOnlyOption,
        getResults: getTestResults,
        checkBridge: () => !!getBridge()
    };

    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π VK Share –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üêõ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: window.debugVKShare');
    
})();
