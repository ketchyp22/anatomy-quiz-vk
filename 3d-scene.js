// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 3d-scene.js - –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û –ö–ê–ö –ù–ê –§–û–¢–û
class SimpleAmbulanceBackground {
   constructor() {
       this.scene = null;
       this.camera = null;
       this.renderer = null;
       this.rafModel = null;
       this.emergencyLights = [];
       this.originalCameraPosition = { x: 8, y: 3, z: 8 };
       this.modelBoundingBox = null;
       this.modelCenter = null;
       this.init();
   }

   init() {
       console.log('üöë –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –†–ê–§-2203 - –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï');
       this.createScene();
       this.createCamera();
       this.createRenderer();
       this.createLighting();
       this.loadOnlyRealModel();
       this.animate();
       
       window.addEventListener('resize', () => this.onWindowResize(), false);
   }

   createScene() {
       this.scene = new THREE.Scene();
       this.scene.background = new THREE.Color(0x87CEEB);
       this.scene.fog = new THREE.Fog(0x87CEEB, 10, 100);
   }

   createCamera() {
       this.camera = new THREE.PerspectiveCamera(
           45, 
           window.innerWidth / window.innerHeight, 
           0.1, 
           1000
       );
       
       this.camera.position.set(
           this.originalCameraPosition.x, 
           this.originalCameraPosition.y, 
           this.originalCameraPosition.z
       );
       
       this.camera.lookAt(0, 0, 0);
       
       console.log('üì∑ –ö–∞–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
   }

   createRenderer() {
       this.renderer = new THREE.WebGLRenderer({ 
           alpha: true, 
           antialias: true,
           powerPreference: "high-performance"
       });
       
       this.renderer.setSize(window.innerWidth, window.innerHeight);
       this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
       this.renderer.shadowMap.enabled = true;
       this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
       this.renderer.outputColorSpace = THREE.SRGBColorSpace;
       
       const container = document.createElement('div');
       container.id = 'threejs-container';
       container.style.cssText = `
           position: fixed;
           top: 0;
           left: 0;
           width: 100%;
           height: 100%;
           z-index: -1;
           pointer-events: none;
           overflow: hidden;
       `;
       
       container.appendChild(this.renderer.domElement);
       document.body.appendChild(container);
       
       console.log('üñ•Ô∏è –†–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–∑–¥–∞–Ω');
   }

   createLighting() {
       const sunLight = new THREE.DirectionalLight(0xffffff, 1.2);
       sunLight.position.set(15, 20, 10);
       sunLight.castShadow = true;
       
       sunLight.shadow.mapSize.width = 2048;
       sunLight.shadow.mapSize.height = 2048;
       sunLight.shadow.camera.near = 0.5;
       sunLight.shadow.camera.far = 100;
       sunLight.shadow.camera.left = -20;
       sunLight.shadow.camera.right = 20;
       sunLight.shadow.camera.top = 20;
       sunLight.shadow.camera.bottom = -20;
       sunLight.shadow.bias = -0.0001;
       
       this.scene.add(sunLight);

       const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
       this.scene.add(ambientLight);
       
       const fillLight = new THREE.DirectionalLight(0x87CEEB, 0.4);
       fillLight.position.set(-10, 5, -10);
       this.scene.add(fillLight);
       
       console.log('üí° –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
   }

   loadOnlyRealModel() {
       console.log('üéØ –ó–ê–ì–†–£–ñ–ê–ï–ú raf22031.3ds (–ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø –§–ê–ô–õ–ê)');
       
       this.ensureTDSLoader().then(() => {
           console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤');
           this.loadRealRaf();
       }).catch((error) => {
           console.error('‚ùå TDSLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
       });
   }

   ensureTDSLoader() {
       return new Promise((resolve, reject) => {
           if (typeof THREE.TDSLoader !== 'undefined') {
               console.log('‚úÖ TDSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
               resolve();
               return;
           }

           console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TDSLoader...');
           
           const script = document.createElement('script');
           script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
           
           script.onload = () => {
               console.log('üì¶ TDSLoader —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
               
               let attempts = 0;
               const checkLoader = () => {
                   attempts++;
                   if (typeof THREE.TDSLoader !== 'undefined') {
                       console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                       resolve();
                   } else if (attempts < 50) {
                       setTimeout(checkLoader, 100);
                   } else {
                       reject(new Error('TDSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω'));
                   }
               };
               setTimeout(checkLoader, 100);
           };
           
           script.onerror = () => {
               reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TDSLoader'));
           };
           
           document.head.appendChild(script);
       });
   }

   loadRealRaf() {
       console.log('üöë –ó–ê–ì–†–£–ñ–ê–ï–ú raf22031.3ds...');
       
       const loader = new THREE.TDSLoader();
       loader.setResourcePath('./Models/');
       
       loader.load(
           './Models/raf22031.3ds',
           (object) => {
               console.log('üéâ RAF22031.3DS –ó–ê–ì–†–£–ñ–ï–ù!');
               this.setupLoadedModel(object);
           },
           (progress) => {
               if (progress.lengthComputable) {
                   const percent = (progress.loaded / progress.total * 100).toFixed(1);
                   console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}%`);
               }
           },
           (error) => {
               console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò .3DS –§–ê–ô–õ–ê:', error);
           }
       );
   }

   setupLoadedModel(object) {
       console.log('üé® –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ú–û–î–ï–õ–¨ –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï–ú...');
       
       this.rafModel = object;
       
       let meshCount = 0;
       object.traverse((child) => {
           if (child.isMesh) {
               meshCount++;
               child.castShadow = true;
               child.receiveShadow = true;
               
               if (child.material) {
                   if (Array.isArray(child.material)) {
                       child.material.forEach(mat => this.improveMaterial(mat));
                   } else {
                       this.improveMaterial(child.material);
                   }
               }
           }
       });
       
       console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—à–µ–π: ${meshCount}`);
       
       this.correctModelPositioning();
       this.loadTextures();
       this.scene.add(this.rafModel);
       this.addEmergencyLights();
       
       console.log('‚úÖ –ú–û–î–ï–õ–¨ –ì–û–¢–û–í–ê –ò –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
   }

   correctModelPositioning() {
       console.log('üìê –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò - –ú–ê–®–ò–ù–ê –î–û–õ–ñ–ù–ê –°–¢–û–Ø–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–û...');
       
       this.modelBoundingBox = new THREE.Box3().setFromObject(this.rafModel);
       this.modelCenter = this.modelBoundingBox.getCenter(new THREE.Vector3());
       const modelSize = this.modelBoundingBox.getSize(new THREE.Vector3());
       
       const maxDimension = Math.max(modelSize.x, modelSize.y, modelSize.z);
       const screenFactor = Math.min(window.innerWidth, window.innerHeight) / 800;
       const baseScale = 3.5;
       const adaptiveScale = baseScale * screenFactor;
       const finalScale = adaptiveScale / maxDimension;
       
       this.rafModel.scale.setScalar(finalScale);
       
       // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –û–†–ò–ï–ù–¢–ê–¶–ò–Ø –ú–ê–®–ò–ù–´
       // –ò—Å—Ö–æ–¥—è –∏–∑ —Ñ–æ—Ç–æ: –º–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ç–æ—è—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, –∫–∞–±–∏–Ω–æ–π –≤–ø–µ—Ä–µ–¥
       
       // –°–ù–ê–ß–ê–õ–ê –°–ë–†–ê–°–´–í–ê–ï–ú –í–°–ï –ü–û–í–û–†–û–¢–´
       this.rafModel.rotation.x = 0;
       this.rafModel.rotation.y = 0;
       this.rafModel.rotation.z = 0;
       
       // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
       const scaledBox = new THREE.Box3().setFromObject(this.rafModel);
       const scaledSize = scaledBox.getSize(new THREE.Vector3());
       
       console.log('üìè –†–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:', {
           x: scaledSize.x.toFixed(2),
           y: scaledSize.y.toFixed(2), 
           z: scaledSize.z.toFixed(2)
       });
       
       // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–ê–®–ò–ù–ê –î–û–õ–ñ–ù–ê –õ–ï–ñ–ê–¢–¨ –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û –ö–ê–ö –ù–ê –§–û–¢–û!
       // –ù–ï –°–¢–û–Ø–¢–¨ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û –ö–ê–ö –°–¢–û–õ–ë!
       
       // –ü–û–í–û–†–û–¢ –î–õ–Ø –ü–†–ê–í–ò–õ–¨–ù–û–ô –û–†–ò–ï–ù–¢–ê–¶–ò–ò
       // –ú–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –õ–ï–ñ–ê–¢–¨ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –≤ —Ñ–æ–Ω–µ, –∞ –Ω–µ —Å—Ç–æ—è—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
       this.rafModel.rotation.x = -Math.PI / 2;  // –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ -90¬∞ —á—Ç–æ–±—ã –ª–µ—á—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
       this.rafModel.rotation.y = 0;             // –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ Y
       this.rafModel.rotation.z = 0;             // –ë–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞
       
       // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
       // –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ 3ds max
       
       // –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–∞ "–∑–µ–º–ª—é"
       this.rafModel.position.set(0, 0, 0);
       
       // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º bounding box –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
       const finalBox = new THREE.Box3().setFromObject(this.rafModel);
       const finalCenter = finalBox.getCenter(new THREE.Vector3());
       const finalSize = finalBox.getSize(new THREE.Vector3());
       
       // –¶–ï–ù–¢–†–ò–†–£–ï–ú –º–∞—à–∏–Ω—É –ø–æ X –∏ Z
       this.rafModel.position.x = -finalCenter.x;
       this.rafModel.position.z = -finalCenter.z;
       
       // –°–¢–ê–í–ò–ú –ù–ê "–ó–ï–ú–õ–Æ" - –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
       this.rafModel.position.y = -finalBox.min.y; // –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ Y=0
       
       console.log('üìç –ú–ê–®–ò–ù–ê –ü–û–°–¢–ê–í–õ–ï–ù–ê –ü–†–ê–í–ò–õ–¨–ù–û:', {
           position: {
               x: this.rafModel.position.x.toFixed(2),
               y: this.rafModel.position.y.toFixed(2),
               z: this.rafModel.position.z.toFixed(2)
           },
           rotation: {
               x: (this.rafModel.rotation.x * 180 / Math.PI).toFixed(1) + '¬∞',
               y: (this.rafModel.rotation.y * 180 / Math.PI).toFixed(1) + '¬∞',
               z: (this.rafModel.rotation.z * 180 / Math.PI).toFixed(1) + '¬∞'
           },
           scale: this.rafModel.scale.x.toFixed(2)
       });
       
       this.adaptCameraToModel(finalSize);
   }

   adaptCameraToModel(modelSize) {
       console.log('üì∑ –ê–î–ê–ü–¢–ò–†–£–ï–ú –ö–ê–ú–ï–†–£ –ö –ü–†–ê–í–ò–õ–¨–ù–û –°–¢–û–Ø–©–ï–ô –ú–ê–®–ò–ù–ï...');
       
       const maxSize = Math.max(modelSize.x, modelSize.y, modelSize.z);
       const distance = maxSize * 2.5;
       
       // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É –ø–æ–¥ —É–≥–ª–æ–º –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ
       this.originalCameraPosition = {
           x: distance * 0.8,   // –ù–µ–º–Ω–æ–≥–æ —Å–±–æ–∫—É
           y: distance * 0.4,   // –°–≤–µ—Ä—Ö—É
           z: distance * 0.8    // –ù–∞–∑–∞–¥
       };
       
       this.camera.position.set(
           this.originalCameraPosition.x,
           this.originalCameraPosition.y,
           this.originalCameraPosition.z
       );
       
       // –°–º–æ—Ç—Ä–∏–º –≤ —Ü–µ–Ω—Ç—Ä –º–∞—à–∏–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Å–æ—Ç—ã
       this.camera.lookAt(0, modelSize.y / 2, 0);
       
       console.log('üì∑ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞ –º–∞—à–∏–Ω—ã');
   }

   improveMaterial(material) {
       material.side = THREE.DoubleSide;
       material.transparent = false;
       material.alphaTest = 0.1;
       
       if (material.type === 'MeshStandardMaterial' || material.type === 'MeshPhysicalMaterial') {
           material.metalness = 0.1;
           material.roughness = 0.8;
       }
       
       material.needsUpdate = true;
   }

   loadTextures() {
       console.log('üñºÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–ï–ö–°–¢–£–†–´ (–ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø –§–ê–ô–õ–ê)...');
       
       const textureLoader = new THREE.TextureLoader();
       
       textureLoader.load(
           './Models/raf22031.JPG',
           (texture) => {
               console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ JPG –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
               this.applyTextureToModel(texture);
           },
           undefined,
           (error) => {
               console.warn('‚ö†Ô∏è JPG –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º BMP...');
               this.tryLoadBMP();
           }
       );
   }

   tryLoadBMP() {
       const textureLoader = new THREE.TextureLoader();
       
       textureLoader.load(
           './Models/raf22031.bmp',
           (texture) => {
               console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ BMP –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
               this.applyTextureToModel(texture);
           },
           undefined,
           (error) => {
               console.warn('‚ö†Ô∏è BMP —Ç–æ–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
           }
       );
   }

   applyTextureToModel(texture) {
       console.log('üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢–£–†–£ –ö –ü–†–ê–í–ò–õ–¨–ù–û –°–¢–û–Ø–©–ï–ô –ú–ê–®–ò–ù–ï...');
       
       texture.flipY = true;
       texture.wrapS = THREE.RepeatWrapping;
       texture.wrapT = THREE.RepeatWrapping;
       texture.minFilter = THREE.LinearFilter;
       texture.magFilter = THREE.LinearFilter;
       texture.generateMipmaps = true;
       
       let texturedMeshes = 0;
       this.rafModel.traverse((child) => {
           if (child.isMesh && child.material) {
               if (Array.isArray(child.material)) {
                   child.material.forEach((mat) => {
                       mat.map = texture;
                       mat.color.setRGB(1, 1, 1);
                       mat.needsUpdate = true;
                   });
               } else {
                   child.material.map = texture;
                   child.material.color.setRGB(1, 1, 1);
                   child.material.needsUpdate = true;
               }
               texturedMeshes++;
           }
       });
       
       console.log(`‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ${texturedMeshes} –º–µ—à–∞–º`);
   }

   addEmergencyLights() {
       if (!this.rafModel) return;
       
       console.log('üö® –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ò–ì–ê–õ–ö–ò –ö –ü–†–ê–í–ò–õ–¨–ù–û –°–¢–û–Ø–©–ï–ô –ú–ê–®–ò–ù–ï...');
       
       const lightGeometry = new THREE.SphereGeometry(0.08, 8, 8);
       const blueMaterial = new THREE.MeshPhongMaterial({ 
           color: 0x0066ff, 
           emissive: 0x003388,
           transparent: true,
           opacity: 0.9
       });
       const redMaterial = new THREE.MeshPhongMaterial({ 
           color: 0xff0000, 
           emissive: 0x660000,
           transparent: true,
           opacity: 0.9
       });
       
       const box = new THREE.Box3().setFromObject(this.rafModel);
       const size = box.getSize(new THREE.Vector3());
       
       this.emergencyLights = [];
       
       // –†–∞–∑–º–µ—â–∞–µ–º –º–∏–≥–∞–ª–∫–∏ –Ω–∞ –∫—Ä—ã—à–µ –º–∞—à–∏–Ω—ã (—Å–≤–µ—Ä—Ö—É)
       for (let i = 0; i < 4; i++) {
           const material = i % 2 === 0 ? blueMaterial.clone() : redMaterial.clone();
           const light = new THREE.Mesh(lightGeometry, material);
           
           const angle = (i / 4) * Math.PI * 2;
           light.position.set(
               Math.cos(angle) * size.x * 0.25,
               size.y * 0.9, // –ù–∞ –∫—Ä—ã—à–µ –º–∞—à–∏–Ω—ã
               Math.sin(angle) * size.z * 0.25
           );
           
           this.rafModel.add(light);
           this.emergencyLights.push(light);
       }
       
       console.log(`üö® –î–æ–±–∞–≤–ª–µ–Ω–æ ${this.emergencyLights.length} –º–∏–≥–∞–ª–æ–∫ –Ω–∞ –∫—Ä—ã—à—É –º–∞—à–∏–Ω—ã`);
   }

   onWindowResize() {
       this.camera.aspect = window.innerWidth / window.innerHeight;
       this.camera.updateProjectionMatrix();
       
       this.renderer.setSize(window.innerWidth, window.innerHeight);
       this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
       
       if (this.rafModel) {
           this.correctModelPositioning();
       }
   }

   animate() {
       requestAnimationFrame(() => this.animate());
       
       const time = Date.now() * 0.001;
       
       if (this.rafModel) {
           if (this.emergencyLights && this.emergencyLights.length > 0) {
               this.emergencyLights.forEach((light, index) => {
                   const intensity = Math.sin(time * 6 + index * Math.PI) > 0 ? 1 : 0.2;
                   light.material.emissive.multiplyScalar(intensity);
               });
           }
       }
       
       // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤–æ–∫—Ä—É–≥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ç–æ—è—â–µ–π –º–∞—à–∏–Ω—ã
       if (this.originalCameraPosition) {
           const radius = Math.sqrt(
               this.originalCameraPosition.x * this.originalCameraPosition.x + 
               this.originalCameraPosition.z * this.originalCameraPosition.z
           );
           
           this.camera.position.x = this.originalCameraPosition.x + Math.sin(time * 0.15) * radius * 0.1;
           this.camera.position.y = this.originalCameraPosition.y + Math.sin(time * 0.2) * 0.5;
           this.camera.position.z = this.originalCameraPosition.z + Math.cos(time * 0.15) * radius * 0.1;
           
           this.camera.lookAt(0, this.originalCameraPosition.y * 0.3, 0);
       }
       
       this.renderer.render(this.scene, this.camera);
   }
}

console.log('üöë –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –í–ï–†–°–ò–ò –†–ê–§-2203 - –ú–ê–®–ò–ù–ê –ë–£–î–ï–¢ –°–¢–û–Ø–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–û');

function startRealRaf() {
   if (typeof THREE === 'undefined') {
       console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
       return false;
   }
   
   if (window.rafBackground) {
       const oldContainer = document.getElementById('threejs-container');
       if (oldContainer) {
           oldContainer.remove();
       }
   }
   
   try {
       window.rafBackground = new SimpleAmbulanceBackground();
       console.log('‚úÖ –†–ê–§-2203 –ó–ê–ü–£–©–ï–ù –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï–ú!');
       return true;
   } catch (error) {
       console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
       return false;
   }
}

setTimeout(startRealRaf, 100);

window.debugRaf = {
   start: startRealRaf,
   restart: () => {
       const oldContainer = document.getElementById('threejs-container');
       if (oldContainer) oldContainer.remove();
       startRealRaf();
   },
   info: () => {
       console.log('=== –†–ê–§-2203 –ü–†–ê–í–ò–õ–¨–ù–û –°–¢–û–Ø–©–ò–ô ===');
       if (window.rafBackground?.rafModel) {
           const model = window.rafBackground.rafModel;
           console.log('–ü–æ–∑–∏—Ü–∏—è:', model.position);
           console.log('–ü–æ–≤–æ—Ä–æ—Ç:', model.rotation);
           console.log('–ú–∞—Å—à—Ç–∞–±:', model.scale.x);
       }
   },
   flipModel: () => {
       if (window.rafBackground?.rafModel) {
           const model = window.rafBackground.rafModel;
           console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ - –î–ï–õ–ê–ï–ú –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û–ô...');
           
           // –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
           if (model.rotation.x === 0) {
               // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ -90¬∞ –ø–æ X —á—Ç–æ–±—ã –ª–µ—á—å
               model.rotation.x = -Math.PI / 2;
               console.log('–ü–æ–≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ -90¬∞ –ø–æ X - –º–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ª–µ—á—å');
           } else if (model.rotation.x === -Math.PI / 2) {
               // –ü—Ä–æ–±—É–µ–º +90¬∞
               model.rotation.x = Math.PI / 2;
               console.log('–ü–æ–≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ +90¬∞ –ø–æ X');
           } else {
               // –°–±—Ä–∞—Å—ã–≤–∞–µ–º
               model.rotation.set(-Math.PI / 2, 0, 0);
               console.log('–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ -90¬∞ –ø–æ X –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è');
           }
       }
   }
};

console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –ì–û–¢–û–í - –ú–ê–®–ò–ù–ê –ë–£–î–ï–¢ –°–¢–û–Ø–¢–¨ –ö–ê–ö –ù–ê –§–û–¢–û!');
console.log('üîß –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –≤—Å–µ –µ—â–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: window.debugRaf.flipModel()');
