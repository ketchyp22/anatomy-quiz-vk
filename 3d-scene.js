// –ü–†–ê–í–ò–õ–¨–ù–´–ô 3d-scene.js —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤
class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.emergencyLights = [];
        this.init();
    }

    init() {
        console.log('üöë –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–§–∏–∫ —Å –í–ê–®–ò–ú–ò —Ñ–∞–π–ª–∞–º–∏ –∏–∑ Models/...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x87CEEB);
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100);
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        const sunLight = new THREE.DirectionalLight(0xffffff, 1.2);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        this.scene.add(sunLight);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
        this.scene.add(ambientLight);

        const frontLight = new THREE.DirectionalLight(0xffffff, 0.6);
        frontLight.position.set(0, 5, 10);
        this.scene.add(frontLight);
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–§–∏–∫ –∏–∑ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤: raf22031.3ds, raf22031.JPG, raf22031.bmp...');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –¥–ª—è –í–ê–®–ò–• —Ç–µ–∫—Å—Ç—É—Ä
        const loadingManager = new THREE.LoadingManager();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –í–ê–®–ò–ú–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        loadingManager.setURLModifier((url) => {
            console.log('üîç TDSLoader –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:', url);
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (url.includes('raf22031') && (url.includes('.jpg') || url.includes('.JPG'))) {
                const texturePath = './Models/raf22031.JPG';
                console.log('üñºÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ JPG —Ç–µ–∫—Å—Ç—É—Ä—É:', texturePath);
                return texturePath;
            }
            
            if (url.includes('raf22031') && (url.includes('.bmp') || url.includes('.BMP'))) {
                const texturePath = './Models/raf22031.bmp';
                console.log('üñºÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ BMP —Ç–µ–∫—Å—Ç—É—Ä—É:', texturePath);
                return texturePath;
            }
            
            // –û–±—â–∏–π —Å–ª—É—á–∞–π - –∏—â–µ–º –≤ –ø–∞–ø–∫–µ Models
            if (url.match(/\.(jpg|jpeg|png|bmp|tga|dds)$/i)) {
                const filename = url.split('/').pop().split('\\').pop();
                const texturePath = './Models/' + filename;
                console.log('üñºÔ∏è –û–±—â–µ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã:', texturePath);
                return texturePath;
            }
            
            return url;
        });
        
        loadingManager.onLoad = () => {
            console.log('‚úÖ –í–°–ï —Ñ–∞–π–ª—ã –†–ê–§–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        };
        
        loadingManager.onProgress = (url, loaded, total) => {
            console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loaded}/${total}: ${url}`);
        };
        
        loadingManager.onError = (url) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –†–ê–§–∏–∫–∞:', url);
        };
        
        this.loadTDSLoader()
            .then(() => {
                this.loadRaf3DS(loadingManager);
            })
            .catch((error) => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TDSLoader:', error);
            });
    }

    loadTDSLoader() {
        return new Promise((resolve, reject) => {
            if (typeof THREE.TDSLoader !== 'undefined') {
                console.log('‚úÖ TDSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TDSLoader –¥–ª—è .3ds —Ñ–∞–π–ª–∞...');
            
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
            
            script.onload = () => {
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.TDSLoader !== 'undefined') {
                        console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .3ds');
                        resolve();
                    } else if (attempts < 20) {
                        setTimeout(checkLoader, 100);
                    } else {
                        reject(new Error('TDSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω'));
                    }
                };
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TDSLoader'));
            document.head.appendChild(script);
        });
    }

    loadRaf3DS(loadingManager) {
        const loader = new THREE.TDSLoader(loadingManager);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –í–ê–®–ò–ú —Ñ–∞–π–ª–∞–º
        loader.setResourcePath('./Models/');
        
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º raf22031.3ds –∏–∑ –ø–∞–ø–∫–∏ Models/...');
        
        loader.load(
            './Models/raf22031.3ds',
            (object) => {
                console.log('üéâ RAF22031.3DS –ó–ê–ì–†–£–ñ–ï–ù –£–°–ü–ï–®–ù–û!');
                console.log('üìä –û–±—ä–µ–∫—Ç –†–ê–§–∏–∫–∞:', object);
                this.setupRaf(object);
            },
            (progress) => {
                if (progress.total > 0) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ raf22031.3ds: ${percent}%`);
                }
            },
            (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ raf22031.3ds:', error);
                console.error('üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª ./Models/raf22031.3ds –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        );
    }

    setupRaf(object) {
        this.ambulance = object;
        
        console.log('üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –†–ê–§–∏–∫–∞...');
        
        // –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(object);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 4 / maxSize;
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        this.ambulance.position.y = 0;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –†–ê–§–∏–∫–∞
        let meshCount = 0;
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                meshCount++;
                child.castShadow = true;
                child.receiveShadow = true;
                
                console.log(`üîç –ú–µ—à ${meshCount}: "${child.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}"`, child.material);
                
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach((material, index) => {
                            this.enhanceRafMaterial(material, `${child.name}_${index}`);
                        });
                    } else {
                        this.enhanceRafMaterial(child.material, child.name);
                    }
                }
            }
        });
        
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${meshCount} –º–µ—à–µ–π –†–ê–§–∏–∫–∞`);
        
        this.scene.add(this.ambulance);
        this.addRafLights();
        
        console.log('‚úÖ –†–ê–§-22031 –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫–∞–∑—É!');
    }

    enhanceRafMaterial(material, name) {
        if (!material) return;
        
        console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –†–ê–§–∏–∫–∞ "${name}":`, material);
        
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .3ds –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        material.side = THREE.DoubleSide;
        material.needsUpdate = true;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä–∞
        if (material.map) {
            console.log('üñºÔ∏è –£ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä–∞:', material.map.image?.src || '–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
            material.map.needsUpdate = true;
            material.map.flipY = false; // –í–∞–∂–Ω–æ –¥–ª—è .3ds
            material.map.minFilter = THREE.LinearMipMapLinearFilter;
            material.map.magFilter = THREE.LinearFilter;
            material.map.generateMipmaps = true;
        } else {
            console.log(`üìù –ù–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è "${name}", –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é`);
            this.loadRafTexture(material, name);
        }
        
        // –£–ª—É—á—à–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if (material.shininess !== undefined) {
            material.shininess = Math.max(material.shininess, 30);
        }
        
        // –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π
        if (material.color) {
            const brightness = material.color.r + material.color.g + material.color.b;
            if (brightness < 0.3) {
                console.log(`üí° –û—Å–≤–µ—Ç–ª—è–µ–º —Ç–µ–º–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª "${name}"`);
                material.color.setRGB(0.8, 0.8, 0.8); // –î–µ–ª–∞–µ–º —Å–≤–µ—Ç–ª–µ–µ
            }
        }
    }

    loadRafTexture(material, name) {
        const textureLoader = new THREE.TextureLoader();
        
        // –í–ê–®–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–µ–∫—Å—Ç—É—Ä
        const rafTextures = [
            './Models/raf22031.JPG',
            './Models/raf22031.bmp'
        ];
        
        rafTextures.forEach(texturePath => {
            textureLoader.load(
                texturePath,
                (texture) => {
                    console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –†–ê–§–∏–∫–∞: ${texturePath} –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "${name}"`);
                    texture.flipY = false;
                    texture.minFilter = THREE.LinearMipMapLinearFilter;
                    texture.magFilter = THREE.LinearFilter;
                    texture.generateMipmaps = true;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
                    material.map = texture;
                    material.needsUpdate = true;
                },
                undefined,
                (error) => {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${texturePath}:`, error.message);
                }
            );
        });
    }

    addRafLights() {
        if (!this.ambulance) return;
        
        console.log('üö® –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞–ª–∫–∏ –Ω–∞ –†–ê–§...');
        
        const lightGeometry = new THREE.SphereGeometry(0.08, 12, 12);
        
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388,
            shininess: 100
        });
        
        const redMaterial = new THREE.MeshPhongMaterial({
            color: 0xff0000,
            emissive: 0x880000,
            shininess: 100
        });
        
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –ú–∏–≥–∞–ª–∫–∏ –Ω–∞ –∫—Ä—ã—à–µ –†–ê–§–∞
        for (let i = 0; i < 6; i++) {
            const isBlue = i % 2 === 0;
            const material = isBlue ? blueMaterial.clone() : redMaterial.clone();
            const light = new THREE.Mesh(lightGeometry, material);
            
            const angle = (i / 6) * Math.PI * 2;
            light.position.set(
                Math.cos(angle) * size.x * 0.2,
                size.y * 0.8,
                Math.sin(angle) * size.z * 0.2
            );
            
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
        
        console.log('üö® –ú–∏–≥–∞–ª–∫–∏ –†–ê–§–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        if (this.ambulance) {
            // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –†–ê–§–∞
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
            
            // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π –†–ê–§–∞
            if (this.emergencyLights && this.emergencyLights.length > 0) {
                this.emergencyLights.forEach((light, index) => {
                    if (light.material) {
                        const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                        light.material.emissive.setScalar(intensity * 0.5);
                    }
                });
            }
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤–æ–∫—Ä—É–≥ –†–ê–§–∞
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ó–∞–ø—É—Å–∫ –†–ê–§-22031 —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏...');
    
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return;
    }
    
    setTimeout(() => {
        try {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –†–ê–§-22031 —Å–æ–∑–¥–∞–Ω —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ê–§–∞:', error);
        }
    }, 500);
});

window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});

console.log('‚úÖ 3D –†–ê–§-22031 –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å –í–ê–®–ò–ú–ò —Ñ–∞–π–ª–∞–º–∏');
