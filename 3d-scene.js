// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô 3d-scene.js - –∑–∞–≥—Ä—É–∂–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô .3ds —Ñ–∞–π–ª

class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.emergencyLights = [];
        this.init();
    }

    init() {
        console.log('üöë –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω —Å –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú .3ds –†–ê–§–∏–∫–æ–º...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        
        // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.scene.background = new THREE.Color(0x87CEEB); // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
        
        // –õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω –¥–ª—è –≥–ª—É–±–∏–Ω—ã
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            100
        );
        
        // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É –ø–æ–¥ —É–≥–ª–æ–º
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true 
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ–Ω–∞
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        // –Ø—Ä–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç
        const sunLight = new THREE.DirectionalLight(0xffffff, 1.2);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        this.scene.add(sunLight);

        // –Ø—Ä–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
        this.scene.add(ambientLight);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–ø–µ—Ä–µ–¥–∏
        const frontLight = new THREE.DirectionalLight(0xffffff, 0.6);
        frontLight.position.set(0, 5, 10);
        this.scene.add(frontLight);

        // –õ–µ–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
        const fillLight = new THREE.DirectionalLight(0xffffff, 0.4);
        fillLight.position.set(-5, -5, 5);
        this.scene.add(fillLight);
        
        console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏');
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô .3ds –†–ê–§–∏–∫ —Å–æ –≤—Å–µ–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏...');
        
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç—É—Ä–∞–º –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π
        const loadingManager = new THREE.LoadingManager();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        loadingManager.setURLModifier((url) => {
            console.log('üîç –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞:', url);
            
            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if (url.match(/\.(jpg|jpeg|png|bmp|tga|dds|exr|hdr|mtl|mat)$/i)) {
                console.log('üìÅ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –≤ Models/:', url);
                // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                const filename = url.split('/').pop().split('\\').pop();
                return './Models/' + filename;
            }
            return url;
        });
        
        // –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        loadingManager.onLoad = () => {
            console.log('‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        };
        
        loadingManager.onProgress = (url, loaded, total) => {
            console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loaded}/${total}: ${url}`);
        };
        
        loadingManager.onError = (url) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', url);
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º 3DSLoader
        this.load3DSLoader()
            .then(() => {
                console.log('‚úÖ 3DSLoader –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–±—É–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ –º–æ–¥–µ–ª—å...');
                return this.loadAmbulanceModel(loadingManager);
            })
            .catch((error) => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                console.log('üö´ FALLBACK –û–¢–ö–õ–Æ–ß–ï–ù - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω');
            });
    }

    load3DSLoader() {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ 3DSLoader
            if (typeof THREE.TDSLoader !== 'undefined') {
                console.log('‚úÖ 3DSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º 3DSLoader –¥–ª—è .3ds —Ñ–∞–π–ª–æ–≤...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç 3DSLoader
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
            
            script.onload = () => {
                console.log('‚úÖ 3DSLoader —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                // –ñ–¥–µ–º, –ø–æ–∫–∞ 3DSLoader —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.TDSLoader !== 'undefined') {
                        console.log('‚úÖ 3DSLoader –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                        resolve();
                    } else if (attempts < 20) {
                        setTimeout(checkLoader, 100);
                    } else {
                        console.error('‚ùå 3DSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã');
                        reject(new Error('3DSLoader –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è'));
                    }
                };
                
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ 3DSLoader —Å–∫—Ä–∏–ø—Ç–∞');
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å 3DSLoader'));
            };
            
            document.head.appendChild(script);
        });
    }

    loadAmbulanceModel(loadingManager) {
        return new Promise((resolve, reject) => {
            const loader = new THREE.TDSLoader(loadingManager);
            
            // –ü—É—Ç–∏ –∫ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú–£ .3ds —Ñ–∞–π–ª—É
            const possiblePaths = [
                './Models/raf22031.3ds',        // –¢–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                './models/raf22031.3ds',        // –°—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
                'Models/raf22031.3ds',          // –ë–µ–∑ —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                'models/raf22031.3ds'           // –°—Ç—Ä–æ—á–Ω—ã–º–∏ –±–µ–∑ —Ç–æ—á–∫–∏
            ];
            
            this.tryLoadModel(loader, possiblePaths, 0, resolve, reject);
        });
    }

    tryLoadModel(loader, paths, index, resolve, reject) {
        if (index >= paths.length) {
            console.error('‚ùå –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ú–û–î–ï–õ–¨ –†–ê–§–ò–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.error('1. –§–∞–π–ª raf22031.3ds —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ Models/');
            console.error('2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω —Ñ–∞–π–ª');
            console.error('3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä');
            
            console.log('üö´ Fallback –º–æ–¥–µ–ª—å –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω');
            reject(new Error('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            return;
        }

        const currentPath = paths[index];
        console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${index + 1}/${paths.length}: ${currentPath}`);
        
        loader.load(
            currentPath,
            
            // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            (object) => {
                console.log(`üöë –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–§–ò–ö –ù–ê–ô–î–ï–ù –ò –ó–ê–ì–†–£–ñ–ï–ù! –ü—É—Ç—å: ${currentPath}`);
                console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:', object);
                this.setupAmbulance(object);
                resolve(object);
            },
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            (progress) => {
                if (progress.total > 0) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –†–ê–§–∏–∫–∞: ${percent}%`);
                }
            },
            
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            (error) => {
                console.warn(`‚ö†Ô∏è –ü—É—Ç—å ${currentPath} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:`, error.message);
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
                this.tryLoadModel(loader, paths, index + 1, resolve, reject);
            }
        );
    }

    setupAmbulance(object) {
        this.ambulance = object;
        
        console.log('üé® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–§–∏–∫ —Å —Ä–æ–¥–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(object);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxSize;
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        this.ambulance.position.y = 0;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï!
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                
                console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—à: "${child.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}"`);
                console.log(`üìê –ú–∞—Ç–µ—Ä–∏–∞–ª:`, child.material);
                
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach((material, index) => {
                            console.log(`üìê –ú–∞—Ç–µ—Ä–∏–∞–ª ${index}:`, material);
                            this.enhanceOriginalMaterial(material, child.name);
                        });
                    } else {
                        this.enhanceOriginalMaterial(child.material, child.name);
                    }
                } else {
                    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –≤–æ–æ–±—â–µ –Ω–µ—Ç
                    console.log(`‚ö†Ô∏è –ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è "${child.name || '–º–µ—à'}", —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π`);
                    child.material = new THREE.MeshPhongMaterial({
                        color: 0xcccccc,
                        shininess: 30,
                        side: THREE.DoubleSide
                    });
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        this.scene.add(this.ambulance);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        this.addSimpleLights();
        
        console.log('üéâ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–§–∏–∫ –≥–æ—Ç–æ–≤ —Å —Ä–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏!');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û —É–ª—É—á—à–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    enhanceOriginalMaterial(material, meshName) {
        if (!material) return;
        
        console.log(`üîß –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è "${meshName || '–º–µ—à'}":`, material);
        
        // –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        material.side = THREE.DoubleSide;
        material.shadowSide = THREE.DoubleSide;
        material.needsUpdate = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
        if (material.map) {
            console.log('üñºÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞:', material.map);
            material.map.needsUpdate = true;
            material.map.flipY = false; // –î–ª—è .3ds —Ñ–∞–π–ª–æ–≤ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ
            
            // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç—É—Ä
            material.map.minFilter = THREE.LinearMipMapLinearFilter;
            material.map.magFilter = THREE.LinearFilter;
            material.map.generateMipmaps = true;
        } else {
            console.log('üìù –ù–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞');
        }
        
        // –ö–∞—Ä—Ç–∞ –Ω–æ—Ä–º–∞–ª–µ–π
        if (material.normalMap) {
            console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –Ω–æ—Ä–º–∞–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞');
            material.normalMap.needsUpdate = true;
            material.normalMap.flipY = false;
        }
        
        // –ö–∞—Ä—Ç–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–π  
        if (material.envMap) {
            console.log('‚ú® –ö–∞—Ä—Ç–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
        if (material.shininess !== undefined) {
            material.shininess = Math.max(material.shininess, 10);
        }
        
        // –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –°–û–í–°–ï–ú —á–µ—Ä–Ω—ã–π –∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã - —Å–ª–µ–≥–∫–∞ –æ—Å–≤–µ—Ç–ª—è–µ–º
        if (!material.map && material.color) {
            const brightness = material.color.r + material.color.g + material.color.b;
            if (brightness < 0.1) {
                console.log('üí° –°–ª–µ–≥–∫–∞ –æ—Å–≤–µ—Ç–ª—è–µ–º —á–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã');
                material.color.setRGB(0.3, 0.3, 0.3); // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω–æ–≥–æ
            }
        }
        
        console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –≥–æ—Ç–æ–≤: —Ü–≤–µ—Ç=${material.color?.getHexString() || '–Ω–µ—Ç'}, —Ç–µ–∫—Å—Ç—É—Ä–∞=${!!material.map}`);
    }

    addSimpleLights() {
        if (!this.ambulance) return;
        
        // –Ø—Ä–∫–∏–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        const lightGeometry = new THREE.SphereGeometry(0.08, 12, 12);
        
        // –°–∏–Ω–∏–µ –º–∏–≥–∞–ª–∫–∏
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388,
            shininess: 100
        });
        
        // –ö—Ä–∞—Å–Ω—ã–µ –º–∏–≥–∞–ª–∫–∏  
        const redMaterial = new THREE.MeshPhongMaterial({
            color: 0xff0000,
            emissive: 0x880000,
            shininess: 100
        });
        
        // –ü–æ–∑–∏—Ü–∏–∏ –æ–≥–Ω–µ–π (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –º–æ–¥–µ–ª—å)
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –û–≥–Ω–∏ –Ω–∞ –∫—Ä—ã—à–µ
        for (let i = 0; i < 6; i++) {
            const isBlue = i % 2 === 0;
            const material = isBlue ? blueMaterial.clone() : redMaterial.clone();
            const light = new THREE.Mesh(lightGeometry, material);
            
            // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–≥–Ω–µ–π –ø–æ –∫—Ä—É–≥—É –Ω–∞ –∫—Ä—ã—à–µ
            const angle = (i / 6) * Math.PI * 2;
            light.position.set(
                Math.cos(angle) * size.x * 0.2,
                size.y * 0.8,
                Math.sin(angle) * size.z * 0.2
            );
            
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
        
        console.log('üö® –î–æ–±–∞–≤–ª–µ–Ω—ã —è—Ä–∫–∏–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –†–ê–§–∏–∫');
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
        if (this.ambulance) {
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
            
            // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if (this.emergencyLights && this.emergencyLights.length > 0) {
                this.emergencyLights.forEach((light, index) => {
                    if (light.material) {
                        const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                        light.material.emissive.setScalar(intensity * 0.5);
                    }
                });
            }
        }
        
        // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞ —Å –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú .3ds –†–ê–§–∏–∫–æ–º...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Three.js
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.');
        return;
    }
    
    console.log('‚úÖ Three.js –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è:', THREE.REVISION);
    
    setTimeout(() => {
        try {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –§–æ–Ω —Å –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú –†–ê–§–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ–Ω–∞:', error);
        }
    }, 500);
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugAmbulance = {
    checkThreeJS: () => {
        console.log('Three.js –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined');
        if (typeof THREE !== 'undefined') {
            console.log('–í–µ—Ä—Å–∏—è Three.js:', THREE.REVISION);
        }
    },
    
    check3DSLoader: () => {
        console.log('3DSLoader –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined' && typeof THREE.TDSLoader !== 'undefined');
    },
    
    checkModel: () => {
        if (window.ambulanceBackground && window.ambulanceBackground.ambulance) {
            console.log('‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            console.log('–ü–æ–∑–∏—Ü–∏—è:', window.ambulanceBackground.ambulance.position);
            console.log('–ú–∞—Å—à—Ç–∞–±:', window.ambulanceBackground.ambulance.scale);
            console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:', window.ambulanceBackground.ambulance);
        } else {
            console.log('‚ùå –ú–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
    },
    
    testPaths: () => {
        const paths = [
            './Models/raf22031.3ds',
            './models/raf22031.3ds', 
            'Models/raf22031.3ds',
            'models/raf22031.3ds'
        ];
        
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –º–æ–¥–µ–ª–∏:');
        paths.forEach(path => {
            fetch(path, { method: 'HEAD' })
                .then(response => {
                    if (response.ok) {
                        console.log(`‚úÖ ${path} - –î–û–°–¢–£–ü–ï–ù`);
                    } else {
                        console.log(`‚ùå ${path} - –ù–ï –î–û–°–¢–£–ü–ï–ù (${response.status})`);
                    }
                })
                .catch(() => {
                    console.log(`‚ùå ${path} - –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê`);
                });
        });
    },
    
    info: () => {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û 3D –§–û–ù–ê ===');
        window.debugAmbulance.checkThreeJS();
        window.debugAmbulance.check3DSLoader();
        window.debugAmbulance.checkModel();
        console.log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
    }
};

console.log('‚úÖ 3D —Ñ–æ–Ω —Å –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú .3ds —Ñ–∞–π–ª–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω');
console.log('üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: window.debugAmbulance.info()');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
