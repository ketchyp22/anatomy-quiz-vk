// –ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ 3d-scene.js –≠–¢–ò–ú –ü–†–û–°–¢–´–ú –ö–û–î–û–ú
// –ß–∏—Å—Ç—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ —Å –≤–∞—à–∏–º –†–ê–§–∏–∫–æ–º

class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.init();
    }

    init() {
        console.log('üöë –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω —Å –†–ê–§–∏–∫–æ–º...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        
        // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.scene.background = new THREE.Color(0x87CEEB); // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
        
        // –õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω –¥–ª—è –≥–ª—É–±–∏–Ω—ã
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            100
        );
        
        // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É –ø–æ–¥ —É–≥–ª–æ–º
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true 
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ–Ω–∞
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        // –ú—è–≥–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç
        const sunLight = new THREE.DirectionalLight(0xffffff, 1);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        this.scene.add(sunLight);

        // –ú—è–≥–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
        const ambientLight = new THREE.AmbientLight(0x404080, 0.6);
        this.scene.add(ambientLight);

        // –õ–µ–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
        const fillLight = new THREE.DirectionalLight(0x8080ff, 0.3);
        fillLight.position.set(-5, -5, 5);
        this.scene.add(fillLight);
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FBXLoader
        if (typeof THREE.FBXLoader === 'undefined') {
            console.error('‚ùå FBXLoader –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ HTML:');
            console.error('<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/examples/js/loaders/FBXLoader.js"></script>');
            this.createFallbackAmbulance();
            return;
        }

        const loader = new THREE.FBXLoader();
        
        loader.load('Models/Ambulance.fbx', 
            (fbx) => {
                console.log('‚úÖ –†–ê–§–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                this.setupAmbulance(fbx);
            },
            (progress) => {
                const percent = (progress.loaded / progress.total * 100).toFixed(1);
                console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –†–ê–§–∏–∫–∞: ${percent}%`);
            },
            (error) => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –†–ê–§–∏–∫:', error);
                console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å...');
                this.createFallbackAmbulance();
            }
        );
    }

    setupAmbulance(fbx) {
        this.ambulance = fbx;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(fbx);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxSize; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ ~3 –µ–¥–∏–Ω–∏—Ü—ã
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        
        // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ "–∑–µ–º–ª–µ–π"
        this.ambulance.position.y = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ–Ω–µ–π
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                
                // –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => {
                            material.side = THREE.DoubleSide;
                            material.shadowSide = THREE.DoubleSide;
                        });
                    } else {
                        child.material.side = THREE.DoubleSide;
                        child.material.shadowSide = THREE.DoubleSide;
                    }
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        this.scene.add(this.ambulance);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        this.addSimpleLights();
        
        console.log('üéâ –†–ê–§–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    addSimpleLights() {
        if (!this.ambulance) return;
        
        // –ü—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        const lightGeometry = new THREE.SphereGeometry(0.05, 8, 8);
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388
        });
        
        // –ü–æ–∑–∏—Ü–∏–∏ –æ–≥–Ω–µ–π (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –º–æ–¥–µ–ª—å)
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –û–≥–Ω–∏ –Ω–∞ –∫—Ä—ã—à–µ
        for (let i = 0; i < 4; i++) {
            const light = new THREE.Mesh(lightGeometry, blueMaterial.clone());
            light.position.set(
                (i % 2 - 0.5) * size.x * 0.3,
                size.y * 0.9,
                (Math.floor(i / 2) - 0.5) * size.z * 0.3
            );
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
    }

    createFallbackAmbulance() {
        console.log('üîß –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞...');
        
        // –ü—Ä–æ—Å—Ç–∞—è –Ω–æ –∫—Ä–∞—Å–∏–≤–∞—è –∑–∞–ø–∞—Å–Ω–∞—è –º–æ–¥–µ–ª—å
        const ambulanceGroup = new THREE.Group();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å
        const bodyGeometry = new THREE.BoxGeometry(4, 1.8, 2);
        const bodyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffffff,
            shininess: 100 
        });
        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
        body.position.y = 1;
        body.castShadow = true;
        ambulanceGroup.add(body);
        
        // –ö–∞–±–∏–Ω–∞
        const cabinGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.8);
        const cabin = new THREE.Mesh(cabinGeometry, bodyMaterial);
        cabin.position.set(1.8, 1.8, 0);
        cabin.castShadow = true;
        ambulanceGroup.add(cabin);
        
        // –ö—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞
        const stripeGeometry = new THREE.BoxGeometry(4.1, 0.3, 0.02);
        const stripeMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
        
        const leftStripe = new THREE.Mesh(stripeGeometry, stripeMaterial);
        leftStripe.position.set(0, 1.2, 1.02);
        ambulanceGroup.add(leftStripe);
        
        const rightStripe = new THREE.Mesh(stripeGeometry, stripeMaterial);
        rightStripe.position.set(0, 1.2, -1.02);
        ambulanceGroup.add(rightStripe);
        
        // –ö–æ–ª–µ—Å–∞
        const wheelGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.3, 12);
        const wheelMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
        
        const wheelPositions = [
            { x: 1.3, z: 1.2 }, { x: 1.3, z: -1.2 },
            { x: -1.3, z: 1.2 }, { x: -1.3, z: -1.2 }
        ];
        
        wheelPositions.forEach(pos => {
            const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
            wheel.rotation.z = Math.PI / 2;
            wheel.position.set(pos.x, 0.4, pos.z);
            wheel.castShadow = true;
            ambulanceGroup.add(wheel);
        });
        
        this.ambulance = ambulanceGroup;
        this.scene.add(this.ambulance);
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
        if (this.ambulance) {
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
        }
        
        // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π
        if (this.emergencyLights) {
            this.emergencyLights.forEach((light, index) => {
                if (light.material) {
                    const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                    light.material.emissive.setScalar(intensity * 0.5);
                }
            });
        }
        
        // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞ —Å –†–ê–§–∏–∫–æ–º...');
    
    setTimeout(() => {
        if (typeof THREE !== 'undefined') {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –§–æ–Ω —Å –†–ê–§–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω!');
        } else {
            console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
    }, 500);
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});
