// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô 3d-scene.js - –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫

class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.emergencyLights = [];
        this.init();
    }

    init() {
        console.log('üöë –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω —Å –†–ê–§–∏–∫–æ–º...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        
        // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.scene.background = new THREE.Color(0x87CEEB); // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
        
        // –õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω –¥–ª—è –≥–ª—É–±–∏–Ω—ã
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            100
        );
        
        // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É –ø–æ–¥ —É–≥–ª–æ–º
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true 
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ–Ω–∞
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        // –ú—è–≥–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç
        const sunLight = new THREE.DirectionalLight(0xffffff, 1);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        this.scene.add(sunLight);

        // –ú—è–≥–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
        const ambientLight = new THREE.AmbientLight(0x404080, 0.6);
        this.scene.add(ambientLight);

        // –õ–µ–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
        const fillLight = new THREE.DirectionalLight(0x8080ff, 0.3);
        fillLight.position.set(-5, -5, 5);
        this.scene.add(fillLight);
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º FBXLoader –ü–†–ê–í–ò–õ–¨–ù–û
        this.loadFBXLoader()
            .then(() => {
                console.log('‚úÖ FBXLoader –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å...');
                return this.loadAmbulanceModel();
            })
            .catch((error) => {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                console.log('üö´ FALLBACK –û–¢–ö–õ–Æ–ß–ï–ù - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω');
                // –ù–ï —Å–æ–∑–¥–∞–µ–º fallback –º–æ–¥–µ–ª—å!
            });
    }

    loadFBXLoader() {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ FBXLoader
            if (typeof THREE.FBXLoader !== 'undefined') {
                console.log('‚úÖ FBXLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º FBXLoader...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç FBXLoader
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FBXLoader.js';
            
            script.onload = () => {
                console.log('‚úÖ FBXLoader —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                // –ñ–¥–µ–º, –ø–æ–∫–∞ FBXLoader —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.FBXLoader !== 'undefined') {
                        console.log('‚úÖ FBXLoader –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                        resolve();
                    } else if (attempts < 20) {
                        setTimeout(checkLoader, 100);
                    } else {
                        console.error('‚ùå FBXLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã');
                        reject(new Error('FBXLoader –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è'));
                    }
                };
                
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FBXLoader —Å–∫—Ä–∏–ø—Ç–∞');
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FBXLoader'));
            };
            
            document.head.appendChild(script);
        });
    }

    loadAmbulanceModel() {
        return new Promise((resolve, reject) => {
            const loader = new THREE.FBXLoader();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            const possiblePaths = [
                './Models/Ambulance.fbx',      // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è
                './models/Ambulance.fbx',      // –°—Ç—Ä–æ—á–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
                'Models/Ambulance.fbx',        // –ë–µ–∑ —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                'models/Ambulance.fbx',        // –°—Ç—Ä–æ—á–Ω—ã–º–∏ –±–µ–∑ —Ç–æ—á–∫–∏
                './assets/Models/Ambulance.fbx', // –í –ø–∞–ø–∫–µ assets
                './assets/models/ambulance.fbx'  // –í—Å–µ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –≤ assets
            ];
            
            this.tryLoadModel(loader, possiblePaths, 0, resolve, reject);
        });
    }

    tryLoadModel(loader, paths, index, resolve, reject) {
        if (index >= paths.length) {
            console.error('‚ùå –ú–û–î–ï–õ–¨ –†–ê–§–ò–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–ê! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.error('1. –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–ø–∫–µ Models/ –∏–ª–∏ models/');
            console.error('2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω —Ñ–∞–π–ª (Ambulance.fbx)');
            console.error('3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä');
            console.error('4. –ù–µ—Ç –ª–∏ –ø—Ä–æ–±–ª–µ–º —Å CORS');
            
            // –í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–µ–º fallback!
            console.log('üö´ Fallback –º–æ–¥–µ–ª—å –û–¢–ö–õ–Æ–ß–ï–ù–ê - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω');
            reject(new Error('–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            return;
        }

        const currentPath = paths[index];
        console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${index + 1}/${paths.length}: ${currentPath}`);
        
        loader.load(
            currentPath,
            
            // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            (fbx) => {
                console.log(`üöë –†–ê–§–ò–ö –ù–ê–ô–î–ï–ù –ò –ó–ê–ì–†–£–ñ–ï–ù! –ü—É—Ç—å: ${currentPath}`);
                this.setupAmbulance(fbx);
                resolve(fbx);
            },
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            (progress) => {
                if (progress.total > 0) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –†–ê–§–∏–∫–∞: ${percent}%`);
                }
            },
            
            // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            (error) => {
                console.warn(`‚ö†Ô∏è –ü—É—Ç—å ${currentPath} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:`, error.message);
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
                this.tryLoadModel(loader, paths, index + 1, resolve, reject);
            }
        );
    }

    setupAmbulance(fbx) {
        this.ambulance = fbx;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(fbx);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxSize; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ ~3 –µ–¥–∏–Ω–∏—Ü—ã
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        
        // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ "–∑–µ–º–ª–µ–π"
        this.ambulance.position.y = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ–Ω–µ–π
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                
                // –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => {
                            material.side = THREE.DoubleSide;
                            material.shadowSide = THREE.DoubleSide;
                        });
                    } else {
                        child.material.side = THREE.DoubleSide;
                        child.material.shadowSide = THREE.DoubleSide;
                    }
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        this.scene.add(this.ambulance);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        this.addSimpleLights();
        
        console.log('üéâ –†–ê–§–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    addSimpleLights() {
        if (!this.ambulance) return;
        
        // –ü—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        const lightGeometry = new THREE.SphereGeometry(0.05, 8, 8);
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388
        });
        
        // –ü–æ–∑–∏—Ü–∏–∏ –æ–≥–Ω–µ–π (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –º–æ–¥–µ–ª—å)
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –û–≥–Ω–∏ –Ω–∞ –∫—Ä—ã—à–µ
        for (let i = 0; i < 4; i++) {
            const light = new THREE.Mesh(lightGeometry, blueMaterial.clone());
            light.position.set(
                (i % 2 - 0.5) * size.x * 0.3,
                size.y * 0.9,
                (Math.floor(i / 2) - 0.5) * size.z * 0.3
            );
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞)
        if (this.ambulance) {
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
            
            // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if (this.emergencyLights && this.emergencyLights.length > 0) {
                this.emergencyLights.forEach((light, index) => {
                    if (light.material) {
                        const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                        light.material.emissive.setScalar(intensity * 0.5);
                    }
                });
            }
        }
        
        // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞ —Å –†–ê–§–∏–∫–æ–º...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Three.js
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.');
        return;
    }
    
    console.log('‚úÖ Three.js –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è:', THREE.REVISION);
    
    setTimeout(() => {
        try {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –§–æ–Ω —Å –†–ê–§–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ–Ω–∞:', error);
        }
    }, 500);
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugAmbulance = {
    checkThreeJS: () => {
        console.log('Three.js –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined');
        if (typeof THREE !== 'undefined') {
            console.log('–í–µ—Ä—Å–∏—è Three.js:', THREE.REVISION);
        }
    },
    
    checkFBXLoader: () => {
        console.log('FBXLoader –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined' && typeof THREE.FBXLoader !== 'undefined');
    },
    
    checkModel: () => {
        if (window.ambulanceBackground && window.ambulanceBackground.ambulance) {
            console.log('‚úÖ –ú–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            console.log('–ü–æ–∑–∏—Ü–∏—è:', window.ambulanceBackground.ambulance.position);
            console.log('–ú–∞—Å—à—Ç–∞–±:', window.ambulanceBackground.ambulance.scale);
        } else {
            console.log('‚ùå –ú–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
    },
    
    testPaths: () => {
        const paths = [
            './Models/Ambulance.fbx',
            './models/Ambulance.fbx',
            'Models/Ambulance.fbx',
            'models/Ambulance.fbx'
        ];
        
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏:');
        paths.forEach(path => {
            fetch(path, { method: 'HEAD' })
                .then(response => {
                    if (response.ok) {
                        console.log(`‚úÖ ${path} - –î–û–°–¢–£–ü–ï–ù`);
                    } else {
                        console.log(`‚ùå ${path} - –ù–ï –î–û–°–¢–£–ü–ï–ù (${response.status})`);
                    }
                })
                .catch(() => {
                    console.log(`‚ùå ${path} - –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê`);
                });
        });
    },
    
    info: () => {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 3D –§–û–ù–ê ===');
        window.debugAmbulance.checkThreeJS();
        window.debugAmbulance.checkFBXLoader();
        window.debugAmbulance.checkModel();
        console.log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
    }
};

console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π 3D —Ñ–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –ë–ï–ó —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫');
console.log('üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: window.debugAmbulance.info()');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
