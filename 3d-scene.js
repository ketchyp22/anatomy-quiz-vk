createFallbackAmbulance() {
        console.log('üé® –°–æ–∑–¥–∞–µ–º –ö–†–ê–°–ò–í–´–ô –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –±–µ–∑ 3D...');
        
        // –£–ë–ò–†–ê–ï–ú –í–ï–°–¨ 3D –ö–û–ù–¢–ï–ô–ù–ï–†
        const container = document.getElementById('threejs-container');
        if (container) {
            container.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π CSS —Ñ–æ–Ω
        const backgroundDiv = document.createElement('div');
        backgroundDiv.id = 'beautiful-background';
        backgroundDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, 
                #667eea 0%, 
                #764ba2 25%, 
                #f093fb 50%, 
                #f5576c 75%, 
                #4facfe 100%);
            background-size: 400% 400%;
            animation: gradientShift 15s ease infinite;
        `;
        
        document.body.appendChild(backgroundDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        if (!document.getElementById('background-animation')) {
            const style = document.createElement('style');
            style.id = 'background-animation';
            style.textContent = `
                @keyframes gradientShift {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }
                
                #beautiful-background::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
                    opacity: 0.3;
                }
            `;
            document.head.appendChil// –ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ 3d-scene.js –≠–¢–ò–ú –ü–†–û–°–¢–´–ú –ö–û–î–û–ú
// –ß–∏—Å—Ç—ã–π —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ —Å –≤–∞—à–∏–º –†–ê–§–∏–∫–æ–º

class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.init();
    }

    init() {
        console.log('üöë –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω —Å –†–ê–§–∏–∫–æ–º...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        
        // –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.scene.background = new THREE.Color(0x87CEEB); // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π
        
        // –õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω –¥–ª—è –≥–ª—É–±–∏–Ω—ã
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            100
        );
        
        // –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–∞—à–∏–Ω—É –ø–æ–¥ —É–≥–ª–æ–º
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true 
        });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–æ–Ω–∞
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        // –ú—è–≥–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç
        const sunLight = new THREE.DirectionalLight(0xffffff, 1);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        this.scene.add(sunLight);

        // –ú—è–≥–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
        const ambientLight = new THREE.AmbientLight(0x404080, 0.6);
        this.scene.add(ambientLight);

        // –õ–µ–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–Ω–∏–∑—É
        const fillLight = new THREE.DirectionalLight(0x8080ff, 0.3);
        fillLight.position.set(-5, -5, 5);
        this.scene.add(fillLight);
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞...');
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ FBXLoader –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
        if (typeof THREE.FBXLoader === 'undefined') {
            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º FBXLoader –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏...');
            this.loadFBXLoaderScript().then(() => {
                this.loadAmbulanceModel();
            }).catch((error) => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FBXLoader:', error);
                console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å...');
                this.createFallbackAmbulance();
            });
        } else {
            console.log('‚úÖ FBXLoader —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            this.loadAmbulanceModel();
        }
    }

    loadFBXLoaderScript() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FBXLoader.js';
            script.onload = () => {
                console.log('‚úÖ FBXLoader –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
                resolve();
            };
            script.onerror = () => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FBXLoader');
                reject();
            };
            document.head.appendChild(script);
        });
    }

    loadAmbulanceModel() {
        const loader = new THREE.FBXLoader();
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        const possiblePaths = [
            'Models/Ambulance.fbx',
            'models/Ambulance.fbx', 
            'models/ambulance.fbx',
            'Models/ambulance.fbx'
        ];
        
        this.tryLoadModel(loader, possiblePaths, 0);
    }

    tryLoadModel(loader, paths, index) {
        if (index >= paths.length) {
            console.error('‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –†–ê–§–ò–ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.error('1. –§–∞–π–ª Models/Ambulance.fbx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?');
            console.error('2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–≤–∞–Ω —Ñ–∞–π–ª?');
            console.error('3. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä?');
            
            // –ù–ò–ö–ê–ö–û–ì–û FALLBACK! –ü—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Ñ–æ–Ω
            console.log('üö´ Fallback –æ—Ç–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω');
            return;
        }

        const currentPath = paths[index];
        console.log(`üîç –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –†–ê–§–∏–∫: ${currentPath}`);
        
        loader.load(currentPath, 
            (fbx) => {
                console.log(`üöë –†–ê–§–ò–ö –ù–ê–ô–î–ï–ù –ò –ó–ê–ì–†–£–ñ–ï–ù! –ü—É—Ç—å: ${currentPath}`);
                this.setupAmbulance(fbx);
            },
            (progress) => {
                if (progress.total > 0) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –†–ê–§–∏–∫–∞: ${percent}%`);
                }
            },
            (error) => {
                console.warn(`‚ö†Ô∏è –†–ê–§–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${currentPath}: ${error.message}`);
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É—Ç—å
                this.tryLoadModel(loader, paths, index + 1);
            }
        );
    }

    createFallbackAmbulance() {
        // –ù–ò–ö–ê–ö–û–ì–û –ö–£–ë–ò–ß–ï–°–ö–û–ì–û –ì–û–í–ù–ê!
        console.log('üö´ Fallback –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª Models/Ambulance.fbx');
        
        // –ü—Ä–æ—Å—Ç–æ —á–∏—Å—Ç—ã–π —Ñ–æ–Ω –±–µ–∑ 3D –æ–±—ä–µ–∫—Ç–æ–≤
        return;
    }

    setupAmbulance(fbx) {
        this.ambulance = fbx;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(fbx);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 3 / maxSize; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ —Ä–∞–∑–º–µ—Ä–∞ ~3 –µ–¥–∏–Ω–∏—Ü—ã
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        
        // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ "–∑–µ–º–ª–µ–π"
        this.ambulance.position.y = 0;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–µ–Ω–µ–π
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                
                // –£–ª—É—á—à–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(material => {
                            material.side = THREE.DoubleSide;
                            material.shadowSide = THREE.DoubleSide;
                        });
                    } else {
                        child.material.side = THREE.DoubleSide;
                        child.material.shadowSide = THREE.DoubleSide;
                    }
                }
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        this.scene.add(this.ambulance);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        this.addSimpleLights();
        
        console.log('üéâ –†–ê–§–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    addSimpleLights() {
        if (!this.ambulance) return;
        
        // –ü—Ä–æ—Å—Ç—ã–µ –º–∏–≥–∞—é—â–∏–µ –æ–≥–Ω–∏
        const lightGeometry = new THREE.SphereGeometry(0.05, 8, 8);
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388
        });
        
        // –ü–æ–∑–∏—Ü–∏–∏ –æ–≥–Ω–µ–π (–∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –º–æ–¥–µ–ª—å)
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –û–≥–Ω–∏ –Ω–∞ –∫—Ä—ã—à–µ
        for (let i = 0; i < 4; i++) {
            const light = new THREE.Mesh(lightGeometry, blueMaterial.clone());
            light.position.set(
                (i % 2 - 0.5) * size.x * 0.3,
                size.y * 0.9,
                (Math.floor(i / 2) - 0.5) * size.z * 0.3
            );
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
    }

    createFallbackAmbulance() {
        console.log('üîß –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω—É—é –º–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞...');
        
        // –ü—Ä–æ—Å—Ç–∞—è –Ω–æ –∫—Ä–∞—Å–∏–≤–∞—è –∑–∞–ø–∞—Å–Ω–∞—è –º–æ–¥–µ–ª—å
        const ambulanceGroup = new THREE.Group();
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å
        const bodyGeometry = new THREE.BoxGeometry(4, 1.8, 2);
        const bodyMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xffffff,
            shininess: 100 
        });
        const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
        body.position.y = 1;
        body.castShadow = true;
        ambulanceGroup.add(body);
        
        // –ö–∞–±–∏–Ω–∞
        const cabinGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.8);
        const cabin = new THREE.Mesh(cabinGeometry, bodyMaterial);
        cabin.position.set(1.8, 1.8, 0);
        cabin.castShadow = true;
        ambulanceGroup.add(cabin);
        
        // –ö—Ä–∞—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞
        const stripeGeometry = new THREE.BoxGeometry(4.1, 0.3, 0.02);
        const stripeMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 });
        
        const leftStripe = new THREE.Mesh(stripeGeometry, stripeMaterial);
        leftStripe.position.set(0, 1.2, 1.02);
        ambulanceGroup.add(leftStripe);
        
        const rightStripe = new THREE.Mesh(stripeGeometry, stripeMaterial);
        rightStripe.position.set(0, 1.2, -1.02);
        ambulanceGroup.add(rightStripe);
        
        // –ö–æ–ª–µ—Å–∞
        const wheelGeometry = new THREE.CylinderGeometry(0.4, 0.4, 0.3, 12);
        const wheelMaterial = new THREE.MeshPhongMaterial({ color: 0x333333 });
        
        const wheelPositions = [
            { x: 1.3, z: 1.2 }, { x: 1.3, z: -1.2 },
            { x: -1.3, z: 1.2 }, { x: -1.3, z: -1.2 }
        ];
        
        wheelPositions.forEach(pos => {
            const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);
            wheel.rotation.z = Math.PI / 2;
            wheel.position.set(pos.x, 0.4, pos.z);
            wheel.castShadow = true;
            ambulanceGroup.add(wheel);
        });
        
        this.ambulance = ambulanceGroup;
        this.scene.add(this.ambulance);
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
        if (this.ambulance) {
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
        }
        
        // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π
        if (this.emergencyLights) {
            this.emergencyLights.forEach((light, index) => {
                if (light.material) {
                    const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                    light.material.emissive.setScalar(intensity * 0.5);
                }
            });
        }
        
        // –õ–µ–≥–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–∞ —Å –†–ê–§–∏–∫–æ–º...');
    
    setTimeout(() => {
        if (typeof THREE !== 'undefined') {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –§–æ–Ω —Å –†–ê–§–∏–∫–æ–º —Å–æ–∑–¥–∞–Ω!');
        } else {
            console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        }
    }, 500);
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});
