// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø 3d-scene.js - –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û
class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.rafModel = null;
        this.emergencyLights = [];
        this.originalCameraPosition = { x: 8, y: 3, z: 8 };
        this.modelBoundingBox = null;
        this.modelCenter = null;
        this.init();
    }

    init() {
        console.log('üöë –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –†–ê–§-2031 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadOnlyRealModel();
        this.animate();
        
        window.addEventListener('resize', () => this.onWindowResize(), false);
    }

    createScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x87CEEB);
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 100);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(
            45, 
            window.innerWidth / window.innerHeight, 
            0.1, 
            1000
        );
        
        this.camera.position.set(
            this.originalCameraPosition.x, 
            this.originalCameraPosition.y, 
            this.originalCameraPosition.z
        );
        
        this.camera.lookAt(0, 0, 0);
        
        console.log('üì∑ –ö–∞–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
            position: this.camera.position,
            aspect: this.camera.aspect,
            fov: this.camera.fov
        });
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: true,
            powerPreference: "high-performance"
        });
        
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        this.renderer.outputColorSpace = THREE.SRGBColorSpace;
        
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
            overflow: hidden;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
        
        console.log('üñ•Ô∏è –†–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–∑–¥–∞–Ω:', {
            size: { width: window.innerWidth, height: window.innerHeight },
            pixelRatio: this.renderer.getPixelRatio()
        });
    }

    createLighting() {
        const sunLight = new THREE.DirectionalLight(0xffffff, 1.2);
        sunLight.position.set(15, 20, 10);
        sunLight.castShadow = true;
        
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        sunLight.shadow.camera.near = 0.5;
        sunLight.shadow.camera.far = 100;
        sunLight.shadow.camera.left = -20;
        sunLight.shadow.camera.right = 20;
        sunLight.shadow.camera.top = 20;
        sunLight.shadow.camera.bottom = -20;
        sunLight.shadow.bias = -0.0001;
        
        this.scene.add(sunLight);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        this.scene.add(ambientLight);
        
        const fillLight = new THREE.DirectionalLight(0x87CEEB, 0.4);
        fillLight.position.set(-10, 5, -10);
        this.scene.add(fillLight);
        
        console.log('üí° –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    loadOnlyRealModel() {
        console.log('üéØ –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–£–Æ –ú–û–î–ï–õ–¨ raf22031.3ds');
        
        this.ensureTDSLoader().then(() => {
            console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º .3ds —Ñ–∞–π–ª');
            this.loadRealRaf();
        }).catch((error) => {
            console.error('‚ùå TDSLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        });
    }

    ensureTDSLoader() {
        return new Promise((resolve, reject) => {
            if (typeof THREE.TDSLoader !== 'undefined') {
                console.log('‚úÖ TDSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TDSLoader...');
            
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
            
            script.onload = () => {
                console.log('üì¶ TDSLoader —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.TDSLoader !== 'undefined') {
                        console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                        resolve();
                    } else if (attempts < 50) {
                        setTimeout(checkLoader, 100);
                    } else {
                        reject(new Error('TDSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏'));
                    }
                };
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => {
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TDSLoader'));
            };
            
            document.head.appendChild(script);
        });
    }

    loadRealRaf() {
        console.log('üöë –ó–ê–ì–†–£–ñ–ê–ï–ú raf22031.3ds...');
        
        const loader = new THREE.TDSLoader();
        loader.setResourcePath('./Models/');
        
        loader.load(
            './Models/raf22031.3ds',
            (object) => {
                console.log('üéâ RAF22031.3DS –ó–ê–ì–†–£–ñ–ï–ù!');
                this.setupLoadedModel(object);
            },
            (progress) => {
                if (progress.lengthComputable) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}%`);
                }
            },
            (error) => {
                console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò .3DS –§–ê–ô–õ–ê:', error);
            }
        );
    }

    setupLoadedModel(object) {
        console.log('üé® –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ó–ê–ì–†–£–ñ–ï–ù–ù–£–Æ –ú–û–î–ï–õ–¨ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –û–†–ò–ï–ù–¢–ê–¶–ò–ï–ô...');
        
        this.rafModel = object;
        
        let meshCount = 0;
        object.traverse((child) => {
            if (child.isMesh) {
                meshCount++;
                child.castShadow = true;
                child.receiveShadow = true;
                
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(mat => this.improveMaterial(mat));
                    } else {
                        this.improveMaterial(child.material);
                    }
                }
            }
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—à–µ–π: ${meshCount}`);
        
        this.correctModelPositioning();
        this.loadTextures();
        this.scene.add(this.rafModel);
        this.addEmergencyLights();
        
        console.log('‚úÖ –ú–û–î–ï–õ–¨ –†–ê–§-2031 –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
    }

    correctModelPositioning() {
        console.log('üìê –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –ò –û–†–ò–ï–ù–¢–ê–¶–ò–Æ...');
        
        this.modelBoundingBox = new THREE.Box3().setFromObject(this.rafModel);
        this.modelCenter = this.modelBoundingBox.getCenter(new THREE.Vector3());
        const modelSize = this.modelBoundingBox.getSize(new THREE.Vector3());
        
        console.log('üìè –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:', {
            center: this.modelCenter,
            size: modelSize,
            boundingBox: this.modelBoundingBox
        });
        
        const maxDimension = Math.max(modelSize.x, modelSize.y, modelSize.z);
        const screenFactor = Math.min(window.innerWidth, window.innerHeight) / 800;
        const baseScale = 3.5;
        const adaptiveScale = baseScale * screenFactor;
        const finalScale = adaptiveScale / maxDimension;
        
        this.rafModel.scale.setScalar(finalScale);
        
        console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–∞—Å—à—Ç–∞–±:', {
            maxDimension,
            screenFactor,
            adaptiveScale,
            finalScale
        });
        
        // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –û–†–ò–ï–ù–¢–ê–¶–ò–Ø - –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ö–û–õ–ï–°–ê–ú–ò –í–ù–ò–ó
        this.rafModel.rotation.x = Math.PI;  // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 180¬∞ –ø–æ X
        this.rafModel.rotation.y = 0;        
        this.rafModel.rotation.z = 0;
        
        this.rafModel.position.set(0, 0, 0);
        
        const scaledBox = new THREE.Box3().setFromObject(this.rafModel);
        const scaledCenter = scaledBox.getCenter(new THREE.Vector3());
        const scaledSize = scaledBox.getSize(new THREE.Vector3());
        
        this.rafModel.position.x = -scaledCenter.x;
        this.rafModel.position.z = -scaledCenter.z;
        this.rafModel.position.y = -scaledBox.min.y;
        
        console.log('üìç –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û:', {
            position: this.rafModel.position,
            rotation: this.rafModel.rotation,
            scale: this.rafModel.scale.x,
            scaledSize
        });
        
        this.adaptCameraToModel(scaledSize);
    }

    adaptCameraToModel(modelSize) {
        console.log('üì∑ –ê–î–ê–ü–¢–ò–†–£–ï–ú –ö–ê–ú–ï–†–£ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏...');
        
        const maxSize = Math.max(modelSize.x, modelSize.y, modelSize.z);
        const distance = maxSize * 2.5;
        
        this.originalCameraPosition = {
            x: distance * 0.8,
            y: distance * 0.4,
            z: distance * 0.8
        };
        
        this.camera.position.set(
            this.originalCameraPosition.x,
            this.originalCameraPosition.y,
            this.originalCameraPosition.z
        );
        
        this.camera.lookAt(0, modelSize.y / 2, 0);
        
        console.log('üì∑ –ö–∞–º–µ—Ä–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞:', {
            distance,
            position: this.camera.position,
            lookingAt: { x: 0, y: modelSize.y / 2, z: 0 }
        });
    }

    improveMaterial(material) {
        material.side = THREE.DoubleSide;
        material.transparent = false;
        material.alphaTest = 0.1;
        
        if (material.type === 'MeshStandardMaterial' || material.type === 'MeshPhysicalMaterial') {
            material.metalness = 0.1;
            material.roughness = 0.8;
        }
        
        material.needsUpdate = true;
    }

    loadTextures() {
        console.log('üñºÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–ï–ö–°–¢–£–†–´...');
        
        const textureLoader = new THREE.TextureLoader();
        
        textureLoader.load(
            './Models/raf22031.JPG',
            (texture) => {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ raf22031.JPG –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                this.applyTextureToModel(texture);
            },
            undefined,
            (error) => {
                console.warn('‚ö†Ô∏è JPG —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º BMP...');
                this.tryLoadBMP();
            }
        );
    }

    tryLoadBMP() {
        const textureLoader = new THREE.TextureLoader();
        
        textureLoader.load(
            './Models/raf22031.bmp',
            (texture) => {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ raf22031.bmp –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                this.applyTextureToModel(texture);
            },
            undefined,
            (error) => {
                console.warn('‚ö†Ô∏è BMP —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ç–æ–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
            }
        );
    }

    applyTextureToModel(texture) {
        console.log('üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢–£–†–£ –ö –ú–û–î–ï–õ–ò...');
        
        texture.flipY = true;
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.minFilter = THREE.LinearFilter;
        texture.magFilter = THREE.LinearFilter;
        texture.generateMipmaps = true;
        
        let texturedMeshes = 0;
        this.rafModel.traverse((child) => {
            if (child.isMesh && child.material) {
                if (Array.isArray(child.material)) {
                    child.material.forEach((mat) => {
                        mat.map = texture;
                        mat.color.setRGB(1, 1, 1);
                        mat.needsUpdate = true;
                    });
                } else {
                    child.material.map = texture;
                    child.material.color.setRGB(1, 1, 1);
                    child.material.needsUpdate = true;
                }
                texturedMeshes++;
            }
        });
        
        console.log(`‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ${texturedMeshes} –º–µ—à–∞–º`);
    }

    addEmergencyLights() {
        if (!this.rafModel) return;
        
        console.log('üö® –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ò–ì–ê–õ–ö–ò...');
        
        const lightGeometry = new THREE.SphereGeometry(0.08, 8, 8);
        const blueMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x0066ff, 
            emissive: 0x003388,
            transparent: true,
            opacity: 0.9
        });
        const redMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xff0000, 
            emissive: 0x660000,
            transparent: true,
            opacity: 0.9
        });
        
        const box = new THREE.Box3().setFromObject(this.rafModel);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        for (let i = 0; i < 4; i++) {
            const material = i % 2 === 0 ? blueMaterial.clone() : redMaterial.clone();
            const light = new THREE.Mesh(lightGeometry, material);
            
            const angle = (i / 4) * Math.PI * 2;
            light.position.set(
                Math.cos(angle) * size.x * 0.25,
                size.y * 0.9,
                Math.sin(angle) * size.z * 0.25
            );
            
            this.rafModel.add(light);
            this.emergencyLights.push(light);
        }
        
        console.log(`üö® –î–æ–±–∞–≤–ª–µ–Ω–æ ${this.emergencyLights.length} –º–∏–≥–∞–ª–æ–∫`);
    }

    onWindowResize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        
        if (this.rafModel) {
            this.correctModelPositioning();
        }
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        if (this.rafModel) {
            if (this.emergencyLights && this.emergencyLights.length > 0) {
                this.emergencyLights.forEach((light, index) => {
                    const intensity = Math.sin(time * 6 + index * Math.PI) > 0 ? 1 : 0.2;
                    light.material.emissive.multiplyScalar(intensity);
                });
            }
        }
        
        if (this.originalCameraPosition) {
            const radius = Math.sqrt(
                this.originalCameraPosition.x * this.originalCameraPosition.x + 
                this.originalCameraPosition.z * this.originalCameraPosition.z
            );
            
            this.camera.position.x = this.originalCameraPosition.x + Math.sin(time * 0.15) * radius * 0.1;
            this.camera.position.y = this.originalCameraPosition.y + Math.sin(time * 0.2) * 0.5;
            this.camera.position.z = this.originalCameraPosition.z + Math.cos(time * 0.15) * radius * 0.1;
            
            this.camera.lookAt(0, this.originalCameraPosition.y * 0.3, 0);
        }
        
        this.renderer.render(this.scene, this.camera);
    }
}

console.log('üöë –ó–ê–ü–£–°–ö –†–ê–§-2031 - –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û');

function startRealRaf() {
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return false;
    }
    
    if (window.rafBackground) {
        const oldContainer = document.getElementById('threejs-container');
        if (oldContainer) {
            oldContainer.remove();
        }
    }
    
    try {
        window.rafBackground = new SimpleAmbulanceBackground();
        console.log('‚úÖ –†–ê–§-2031 –°–¢–û–ò–¢ –ü–†–ê–í–ò–õ–¨–ù–û!');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        return false;
    }
}

setTimeout(startRealRaf, 100);

window.debugRaf = {
    start: startRealRaf,
    restart: () => {
        const oldContainer = document.getElementById('threejs-container');
        if (oldContainer) oldContainer.remove();
        startRealRaf();
    },
    info: () => {
        console.log('=== –†–ê–§-2031 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
        if (window.rafBackground?.rafModel) {
            const model = window.rafBackground.rafModel;
            console.log('–ü–æ–∑–∏—Ü–∏—è:', model.position);
            console.log('–ü–æ–≤–æ—Ä–æ—Ç:', model.rotation);
            console.log('–ú–∞—Å—à—Ç–∞–±:', model.scale.x);
        }
    }
};

console.log('‚úÖ –†–ê–§-2031 –ö–û–î –ì–û–¢–û–í - –ú–ê–®–ò–ù–ê –°–¢–û–ò–¢ –ö–û–õ–ï–°–ê–ú–ò –í–ù–ò–ó!');
