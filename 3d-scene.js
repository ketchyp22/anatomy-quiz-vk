// –¢–û–õ–¨–ö–û –ó–ê–ì–†–£–ó–ö–ê .3DS –§–ê–ô–õ–ê - –ù–ò–ö–ê–ö–ò–• –†–ï–ó–ï–†–í–ù–´–• –ú–û–î–ï–õ–ï–ô!
class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.rafModel = null;
        this.emergencyLights = [];
        this.init();
    }

    init() {
        console.log('üöë –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–û–õ–¨–ö–û .3DS –§–ê–ô–õ - –ë–ï–ó –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í!');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadOnlyRealModel();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x87CEEB);
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100);
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        const sunLight = new THREE.DirectionalLight(0xffffff, 1.5);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        this.scene.add(sunLight);

        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
        this.scene.add(ambientLight);
    }

    loadOnlyRealModel() {
        console.log('üéØ –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–£–Æ –ú–û–î–ï–õ–¨ raf2031.3ds');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ TDSLoader –¥–æ—Å—Ç—É–ø–µ–Ω
        this.ensureTDSLoader().then(() => {
            console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º .3ds —Ñ–∞–π–ª');
            this.loadRealRaf();
        }).catch((error) => {
            console.error('‚ùå TDSLoader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            console.error('‚ùå –ë–ï–ó TDSLoader .3ds –§–ê–ô–õ –ù–ï –ó–ê–ì–†–£–ó–ò–¢–°–Ø!');
        });
    }

    ensureTDSLoader() {
        return new Promise((resolve, reject) => {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å - –æ—Ç–ª–∏—á–Ω–æ
            if (typeof THREE.TDSLoader !== 'undefined') {
                console.log('‚úÖ TDSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TDSLoader...');
            
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
            
            script.onload = () => {
                console.log('üì¶ TDSLoader —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                // –ñ–¥–µ–º –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.TDSLoader !== 'undefined') {
                        console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                        resolve();
                    } else if (attempts < 50) {
                        setTimeout(checkLoader, 100);
                    } else {
                        reject(new Error('TDSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏'));
                    }
                };
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => {
                reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TDSLoader'));
            };
            
            document.head.appendChild(script);
        });
    }

    loadRealRaf() {
        console.log('üöë –ó–ê–ì–†–£–ñ–ê–ï–ú raf2031.3ds...');
        
        const loader = new THREE.TDSLoader();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        loader.setResourcePath('./Models/');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        loader.load(
            './Models/raf22031.3ds',
            (object) => {
                console.log('üéâ RAF2031.3DS –ó–ê–ì–†–£–ñ–ï–ù!');
                console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:', object);
                console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:', object.children.length);
                
                this.setupLoadedModel(object);
            },
            (progress) => {
                if (progress.lengthComputable) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞: ${percent}%`);
                } else {
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–∞–π—Ç: ${progress.loaded}`);
                }
            },
            (error) => {
                console.error('‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò .3DS –§–ê–ô–õ–ê:');
                console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                console.error('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
                console.error('   1. –§–∞–π–ª ./Models/raf2031.3ds —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                console.error('   2. –§–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
                console.error('   3. –ü—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π');
                console.error('   4. –ù–µ—Ç CORS –æ—à–∏–±–æ–∫');
            }
        );
    }

    setupLoadedModel(object) {
        console.log('üé® –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ó–ê–ì–†–£–ñ–ï–ù–ù–£–Æ –ú–û–î–ï–õ–¨...');
        
        this.rafModel = object;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        let meshCount = 0;
        object.traverse((child) => {
            if (child.isMesh) {
                meshCount++;
                console.log(`üîç –ú–µ—à ${meshCount}: "${child.name}"`);
                console.log(`   –ì–µ–æ–º–µ—Ç—Ä–∏—è:`, child.geometry);
                console.log(`   –ú–∞—Ç–µ—Ä–∏–∞–ª:`, child.material);
                
                // –í–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏
                child.castShadow = true;
                child.receiveShadow = true;
            }
        });
        
        console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –º–µ—à–µ–π: ${meshCount}`);
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(object);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        
        console.log(`üìè –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: ${size.x.toFixed(2)} x ${size.y.toFixed(2)} x ${size.z.toFixed(2)}`);
        console.log(`üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxSize.toFixed(2)}`);
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const scale = 4 / maxSize;
        this.rafModel.scale.setScalar(scale);
        console.log(`üìè –ü—Ä–∏–º–µ–Ω–µ–Ω –º–∞—Å—à—Ç–∞–±: ${scale.toFixed(3)}`);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        const center = box.getCenter(new THREE.Vector3());
        this.rafModel.position.sub(center.multiplyScalar(scale));
        this.rafModel.position.y = 0;
        
        console.log(`üìç –ü–æ–∑–∏—Ü–∏—è –º–æ–¥–µ–ª–∏: ${this.rafModel.position.x.toFixed(2)}, ${this.rafModel.position.y.toFixed(2)}, ${this.rafModel.position.z.toFixed(2)}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
        this.loadTextures();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        this.scene.add(this.rafModel);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞–ª–∫–∏
        this.addEmergencyLights();
        
        console.log('‚úÖ –ú–û–î–ï–õ–¨ –†–ê–§-2031 –ì–û–¢–û–í–ê!');
    }

    loadTextures() {
        console.log('üñºÔ∏è –ó–ê–ì–†–£–ñ–ê–ï–ú –¢–ï–ö–°–¢–£–†–´...');
        
        const textureLoader = new THREE.TextureLoader();
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º JPG
        textureLoader.load(
            './Models/raf22031.JPG',
            (texture) => {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ raf2031.JPG –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                this.applyTextureToModel(texture);
            },
            (progress) => {
                console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã JPG...');
            },
            (error) => {
                console.warn('‚ö†Ô∏è JPG —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º BMP...');
                this.tryLoadBMP();
            }
        );
    }

    tryLoadBMP() {
        const textureLoader = new THREE.TextureLoader();
        
        textureLoader.load(
            './Models/raf22031.bmp',
            (texture) => {
                console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ raf2031.bmp –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                this.applyTextureToModel(texture);
            },
            (progress) => {
                console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä—ã BMP...');
            },
            (error) => {
                console.warn('‚ö†Ô∏è BMP —Ç–µ–∫—Å—Ç—É—Ä–∞ —Ç–æ–∂–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
                console.warn('‚ö†Ô∏è –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä');
            }
        );
    }

    applyTextureToModel(texture) {
        console.log('üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢–£–†–£ –ö –ú–û–î–ï–õ–ò...');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
        texture.flipY = false;
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.minFilter = THREE.LinearFilter;
        texture.magFilter = THREE.LinearFilter;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º –º–µ—à–∞–º
        let texturedMeshes = 0;
        this.rafModel.traverse((child) => {
            if (child.isMesh && child.material) {
                if (Array.isArray(child.material)) {
                    child.material.forEach(mat => {
                        mat.map = texture;
                        mat.needsUpdate = true;
                    });
                } else {
                    child.material.map = texture;
                    child.material.needsUpdate = true;
                }
                texturedMeshes++;
                console.log(`üñºÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –º–µ—à—É: ${child.name}`);
            }
        });
        
        console.log(`‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ${texturedMeshes} –º–µ—à–∞–º`);
    }

    addEmergencyLights() {
        console.log('üö® –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ò–ì–ê–õ–ö–ò...');
        
        const lightGeometry = new THREE.SphereGeometry(0.1, 8, 8);
        const blueMaterial = new THREE.MeshPhongMaterial({ 
            color: 0x0066ff, 
            emissive: 0x003388 
        });
        const redMaterial = new THREE.MeshPhongMaterial({ 
            color: 0xff0000, 
            emissive: 0x660000 
        });
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–≥–∞–ª–æ–∫
        const box = new THREE.Box3().setFromObject(this.rafModel);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞–ª–∫–∏ –Ω–∞ –∫—Ä—ã—à—É
        for (let i = 0; i < 4; i++) {
            const material = i % 2 === 0 ? blueMaterial.clone() : redMaterial.clone();
            const light = new THREE.Mesh(lightGeometry, material);
            
            const angle = (i / 4) * Math.PI * 2;
            light.position.set(
                Math.cos(angle) * size.x * 0.3,
                size.y * 1.2,
                Math.sin(angle) * size.z * 0.3
            );
            
            this.rafModel.add(light);
            this.emergencyLights.push(light);
        }
        
        console.log(`üö® –î–æ–±–∞–≤–ª–µ–Ω–æ ${this.emergencyLights.length} –º–∏–≥–∞–ª–æ–∫`);
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        if (this.rafModel) {
            // –õ–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ
            this.rafModel.rotation.y = Math.sin(time * 0.3) * 0.05;
            
            // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π
            if (this.emergencyLights) {
                this.emergencyLights.forEach((light, index) => {
                    const intensity = Math.sin(time * 6 + index * Math.PI) > 0 ? 1 : 0.1;
                    light.material.emissive.multiplyScalar(intensity);
                });
            }
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        this.camera.position.x = 8 + Math.sin(time * 0.2) * 1;
        this.camera.position.y = 3 + Math.sin(time * 0.3) * 0.5;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–í–¢–û–ó–ê–ü–£–°–ö
console.log('üöë –ó–ê–ü–£–°–ö –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò –†–ê–§-2031');

function startRealRaf() {
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return false;
    }
    
    if (window.rafBackground) {
        console.log('‚ö†Ô∏è –†–ê–§ —É–∂–µ —Å–æ–∑–¥–∞–Ω');
        return true;
    }
    
    try {
        window.rafBackground = new SimpleAmbulanceBackground();
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –†–ê–§-2031 –∑–∞–ø—É—â–µ–Ω–∞');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
setTimeout(startRealRaf, 100);

// –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
window.debugRaf = {
    start: startRealRaf,
    
    checkFiles: async () => {
        const files = ['./Models/raf22031.3ds', './Models/raf22031.JPG', './Models/raf22031.bmp'];
        for (const file of files) {
            try {
                const response = await fetch(file, { method: 'HEAD' });
                console.log(`${response.ok ? '‚úÖ' : '‚ùå'} ${file} - ${response.status}`);
            } catch (error) {
                console.log(`‚ùå ${file} - –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
    },
    
    info: () => {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–§-2031 ===');
        console.log('Three.js:', typeof THREE !== 'undefined' ? '‚úÖ' : '‚ùå');
        console.log('TDSLoader:', typeof THREE?.TDSLoader !== 'undefined' ? '‚úÖ' : '‚ùå');
        console.log('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', window.rafBackground?.rafModel ? '‚úÖ' : '‚ùå');
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤: window.debugRaf.checkFiles()');
    }
};

console.log('‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω - –¢–û–õ–¨–ö–û .3DS –§–ê–ô–õ!');
console.log('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: window.debugRaf.info()');
console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤: window.debugRaf.checkFiles()');
