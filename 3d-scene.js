// –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô 3d-scene.js —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –†–ê–§–∏–∫–∞
class SimpleAmbulanceBackground {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.ambulance = null;
        this.emergencyLights = [];
        this.init();
    }

    init() {
        console.log('üöë –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–§–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏...');
        this.createScene();
        this.createCamera();
        this.createRenderer();
        this.createLighting();
        this.loadAmbulance();
        this.animate();
    }

    createScene() {
        this.scene = new THREE.Scene();
        this.scene.background = new THREE.Color(0x87CEEB);
        this.scene.fog = new THREE.Fog(0x87CEEB, 10, 50);
    }

    createCamera() {
        this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100);
        this.camera.position.set(8, 3, 8);
        this.camera.lookAt(0, 0, 0);
    }

    createRenderer() {
        this.renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        
        const container = document.createElement('div');
        container.id = 'threejs-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            pointer-events: none;
        `;
        
        container.appendChild(this.renderer.domElement);
        document.body.appendChild(container);
    }

    createLighting() {
        // –Ø—Ä–∫–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        const sunLight = new THREE.DirectionalLight(0xffffff, 1.5);
        sunLight.position.set(10, 10, 5);
        sunLight.castShadow = true;
        sunLight.shadow.mapSize.width = 2048;
        sunLight.shadow.mapSize.height = 2048;
        this.scene.add(sunLight);

        // –Ø—Ä–∫–∏–π –æ–∫—Ä—É–∂–∞—é—â–∏–π —Å–≤–µ—Ç
        const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
        this.scene.add(ambientLight);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–ø–µ—Ä–µ–¥–∏
        const frontLight = new THREE.DirectionalLight(0xffffff, 0.8);
        frontLight.position.set(0, 5, 10);
        this.scene.add(frontLight);

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–∑–∞–¥–∏
        const backLight = new THREE.DirectionalLight(0xffffff, 0.6);
        backLight.position.set(0, 5, -10);
        this.scene.add(backLight);

        // –ë–æ–∫–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        const sideLight = new THREE.DirectionalLight(0xffffff, 0.4);
        sideLight.position.set(-10, 3, 0);
        this.scene.add(sideLight);
        
        console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –†–ê–§–∏–∫–∞');
    }

    loadAmbulance() {
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–§–∏–∫ –∏–∑ —Ñ–∞–π–ª–æ–≤: raf22031.3ds + —Ç–µ–∫—Å—Ç—É—Ä—ã...');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –¥–ª—è –í–ê–®–ò–• —Ç–µ–∫—Å—Ç—É—Ä
        const loadingManager = new THREE.LoadingManager();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –í–ê–®–ò–ú–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        loadingManager.setURLModifier((url) => {
            console.log('üîç TDSLoader –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:', url);
            
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (url.includes('raf22031') && (url.includes('.jpg') || url.includes('.JPG'))) {
                const texturePath = './Models/raf22031.JPG';
                console.log('üñºÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ JPG —Ç–µ–∫—Å—Ç—É—Ä—É:', texturePath);
                return texturePath;
            }
            
            if (url.includes('raf22031') && (url.includes('.bmp') || url.includes('.BMP'))) {
                const texturePath = './Models/raf22031.bmp';
                console.log('üñºÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ BMP —Ç–µ–∫—Å—Ç—É—Ä—É:', texturePath);
                return texturePath;
            }
            
            // –û–±—â–∏–π —Å–ª—É—á–∞–π - –∏—â–µ–º –≤ –ø–∞–ø–∫–µ Models
            if (url.match(/\.(jpg|jpeg|png|bmp|tga|dds)$/i)) {
                const filename = url.split('/').pop().split('\\').pop();
                const texturePath = './Models/' + filename;
                console.log('üñºÔ∏è –û–±—â–µ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã:', texturePath);
                return texturePath;
            }
            
            return url;
        });
        
        loadingManager.onLoad = () => {
            console.log('‚úÖ –í–°–ï —Ñ–∞–π–ª—ã –†–ê–§–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        };
        
        loadingManager.onProgress = (url, loaded, total) => {
            console.log(`‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${loaded}/${total}: ${url}`);
        };
        
        loadingManager.onError = (url) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –†–ê–§–∏–∫–∞:', url);
        };
        
        this.loadTDSLoader()
            .then(() => {
                this.loadRaf3DS(loadingManager);
            })
            .catch((error) => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TDSLoader:', error);
            });
    }

    loadTDSLoader() {
        return new Promise((resolve, reject) => {
            if (typeof THREE.TDSLoader !== 'undefined') {
                console.log('‚úÖ TDSLoader —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                resolve();
                return;
            }

            console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º TDSLoader –¥–ª—è .3ds —Ñ–∞–π–ª–∞...');
            
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/TDSLoader.js';
            
            script.onload = () => {
                let attempts = 0;
                const checkLoader = () => {
                    attempts++;
                    if (typeof THREE.TDSLoader !== 'undefined') {
                        console.log('‚úÖ TDSLoader –≥–æ—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .3ds');
                        resolve();
                    } else if (attempts < 20) {
                        setTimeout(checkLoader, 100);
                    } else {
                        reject(new Error('TDSLoader –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω'));
                    }
                };
                setTimeout(checkLoader, 100);
            };
            
            script.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TDSLoader'));
            document.head.appendChild(script);
        });
    }

    loadRaf3DS(loadingManager) {
        const loader = new THREE.TDSLoader(loadingManager);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –í–ê–®–ò–ú —Ñ–∞–π–ª–∞–º
        loader.setResourcePath('./Models/');
        
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º raf22031.3ds –∏–∑ –ø–∞–ø–∫–∏ Models/...');
        
        loader.load(
            './Models/raf22031.3ds',
            (object) => {
                console.log('üéâ RAF22031.3DS –ó–ê–ì–†–£–ñ–ï–ù –£–°–ü–ï–®–ù–û!');
                console.log('üìä –û–±—ä–µ–∫—Ç –†–ê–§–∏–∫–∞:', object);
                this.setupRaf(object);
            },
            (progress) => {
                if (progress.total > 0) {
                    const percent = (progress.loaded / progress.total * 100).toFixed(1);
                    console.log(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ raf22031.3ds: ${percent}%`);
                }
            },
            (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ raf22031.3ds:', error);
                console.error('üîç –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª ./Models/raf22031.3ds –¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        );
    }

    setupRaf(object) {
        this.ambulance = object;
        
        console.log('üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –†–ê–§–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏...');
        
        // –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const box = new THREE.Box3().setFromObject(object);
        const size = box.getSize(new THREE.Vector3());
        const maxSize = Math.max(size.x, size.y, size.z);
        const scale = 4 / maxSize;
        
        this.ambulance.scale.setScalar(scale);
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        const center = box.getCenter(new THREE.Vector3());
        this.ambulance.position.sub(center.multiplyScalar(scale));
        this.ambulance.position.y = 0;
        
        // –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –†–ê–§–∞
        this.ambulance.rotation.x = 0;
        this.ambulance.rotation.y = 0; // –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Math.PI –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç –Ω–µ —Ç—É–¥–∞
        this.ambulance.rotation.z = 0;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç—É—Ä
        let meshCount = 0;
        this.ambulance.traverse((child) => {
            if (child.isMesh) {
                meshCount++;
                child.castShadow = true;
                child.receiveShadow = true;
                
                console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—à ${meshCount}: "${child.name || '–±–µ–∑ –∏–º–µ–Ω–∏'}"`);
                
                if (child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach((material, index) => {
                            this.enhanceRafMaterial(material, `${child.name}_${index}`);
                        });
                    } else {
                        this.enhanceRafMaterial(child.material, child.name);
                    }
                }
            }
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            this.ambulance.traverse((child) => {
                if (child.isMesh && child.material) {
                    if (Array.isArray(child.material)) {
                        child.material.forEach(mat => {
                            mat.needsUpdate = true;
                            if (mat.map) mat.map.needsUpdate = true;
                        });
                    } else {
                        child.material.needsUpdate = true;
                        if (child.material.map) child.material.map.needsUpdate = true;
                    }
                }
            });
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        }, 1000);
        
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${meshCount} –º–µ—à–µ–π –†–ê–§–∏–∫–∞`);
        
        this.scene.add(this.ambulance);
        this.addRafLights();
        
        console.log('‚úÖ –†–ê–§-22031 –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫–∞–∑—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏!');
    }

    enhanceRafMaterial(material, name) {
        if (!material) return;
        
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä –¥–ª—è "${name}":`, material);
        
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .3ds –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        material.side = THREE.DoubleSide;
        material.needsUpdate = true;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (material.map) {
            console.log('üñºÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—Å—Ç—É—Ä—É');
            
            // –í–ê–ñ–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è .3ds —Ç–µ–∫—Å—Ç—É—Ä
            material.map.needsUpdate = true;
            material.map.flipY = false; // –î–ª—è .3ds —Ñ–∞–π–ª–æ–≤ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
            material.map.wrapS = THREE.RepeatWrapping;
            material.map.wrapT = THREE.RepeatWrapping;
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
            material.map.minFilter = THREE.LinearFilter;
            material.map.magFilter = THREE.LinearFilter;
            material.map.generateMipmaps = false; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
            // –¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            material.map.colorSpace = THREE.SRGBColorSpace;
            
        } else {
            console.log(`üìù –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è "${name}"`);
            this.loadRafTextureFixed(material, name);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        material.shininess = 30;
        material.transparent = false;
        material.alphaTest = 0;
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        if (material.color) {
            // –ù–µ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä–∞
            if (!material.map) {
                material.color.setRGB(1, 1, 1); // –ë–µ–ª—ã–π –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç
            }
        }
    }

    loadRafTextureFixed(material, name) {
        const textureLoader = new THREE.TextureLoader();
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –†–ê–§–∞
        textureLoader.load(
            './Models/raf22031.JPG',
            (texture) => {
                console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ JPG —Ç–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è "${name}"`);
                
                // –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .3ds —Ç–µ–∫—Å—Ç—É—Ä
                texture.flipY = false; // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è .3ds
                texture.wrapS = THREE.RepeatWrapping;
                texture.wrapT = THREE.RepeatWrapping;
                texture.minFilter = THREE.LinearFilter;
                texture.magFilter = THREE.LinearFilter;
                texture.generateMipmaps = false;
                texture.colorSpace = THREE.SRGBColorSpace;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É
                material.map = texture;
                material.needsUpdate = true;
                
                console.log(`‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ "${name}"`);
            },
            undefined,
            (error) => {
                console.log(`‚ö†Ô∏è JPG –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º BMP –¥–ª—è "${name}"`);
                
                // Fallback –Ω–∞ BMP
                textureLoader.load(
                    './Models/raf22031.bmp',
                    (texture) => {
                        console.log(`üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–∞ BMP —Ç–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è "${name}"`);
                        
                        // –¢–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è BMP
                        texture.flipY = false;
                        texture.wrapS = THREE.RepeatWrapping;
                        texture.wrapT = THREE.RepeatWrapping;
                        texture.minFilter = THREE.LinearFilter;
                        texture.magFilter = THREE.LinearFilter;
                        texture.generateMipmaps = false;
                        texture.colorSpace = THREE.SRGBColorSpace;
                        
                        material.map = texture;
                        material.needsUpdate = true;
                        
                        console.log(`‚úÖ BMP —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ "${name}"`);
                    },
                    undefined,
                    (error) => {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è "${name}"`);
                    }
                );
            }
        );
    }

    addRafLights() {
        if (!this.ambulance) return;
        
        console.log('üö® –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞–ª–∫–∏ –Ω–∞ –†–ê–§...');
        
        const lightGeometry = new THREE.SphereGeometry(0.08, 12, 12);
        
        const blueMaterial = new THREE.MeshPhongMaterial({
            color: 0x0066ff,
            emissive: 0x003388,
            shininess: 100
        });
        
        const redMaterial = new THREE.MeshPhongMaterial({
            color: 0xff0000,
            emissive: 0x880000,
            shininess: 100
        });
        
        const box = new THREE.Box3().setFromObject(this.ambulance);
        const size = box.getSize(new THREE.Vector3());
        
        this.emergencyLights = [];
        
        // –ú–∏–≥–∞–ª–∫–∏ –Ω–∞ –∫—Ä—ã—à–µ –†–ê–§–∞
        for (let i = 0; i < 6; i++) {
            const isBlue = i % 2 === 0;
            const material = isBlue ? blueMaterial.clone() : redMaterial.clone();
            const light = new THREE.Mesh(lightGeometry, material);
            
            const angle = (i / 6) * Math.PI * 2;
            light.position.set(
                Math.cos(angle) * size.x * 0.2,
                size.y * 0.8,
                Math.sin(angle) * size.z * 0.2
            );
            
            this.ambulance.add(light);
            this.emergencyLights.push(light);
        }
        
        console.log('üö® –ú–∏–≥–∞–ª–∫–∏ –†–ê–§–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    animate() {
        requestAnimationFrame(() => this.animate());
        
        const time = Date.now() * 0.001;
        
        if (this.ambulance) {
            // –õ–µ–≥–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –†–ê–§–∞
            this.ambulance.rotation.y = Math.sin(time * 0.2) * 0.1;
            
            // –ú–∏–≥–∞–Ω–∏–µ –æ–≥–Ω–µ–π –†–ê–§–∞
            if (this.emergencyLights && this.emergencyLights.length > 0) {
                this.emergencyLights.forEach((light, index) => {
                    if (light.material) {
                        const intensity = Math.sin(time * 8 + index * Math.PI) > 0 ? 0.8 : 0.1;
                        light.material.emissive.setScalar(intensity * 0.5);
                    }
                });
            }
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –≤–æ–∫—Ä—É–≥ –†–ê–§–∞
        this.camera.position.x = 8 + Math.sin(time * 0.3) * 0.5;
        this.camera.position.y = 3 + Math.sin(time * 0.4) * 0.2;
        this.camera.lookAt(0, 0, 0);
        
        this.renderer.render(this.scene, this.camera);
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöë –ó–∞–ø—É—Å–∫ –†–ê–§-22031 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏...');
    
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
        return;
    }
    
    setTimeout(() => {
        try {
            window.ambulanceBackground = new SimpleAmbulanceBackground();
            console.log('‚úÖ –†–ê–§-22031 —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –†–ê–§–∞:', error);
        }
    }, 500);
});

// –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', function() {
    if (window.ambulanceBackground) {
        const bg = window.ambulanceBackground;
        bg.camera.aspect = window.innerWidth / window.innerHeight;
        bg.camera.updateProjectionMatrix();
        bg.renderer.setSize(window.innerWidth, window.innerHeight);
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.debugAmbulance = {
    checkThreeJS: () => {
        console.log('Three.js –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined');
        if (typeof THREE !== 'undefined') {
            console.log('–í–µ—Ä—Å–∏—è Three.js:', THREE.REVISION);
        }
    },
    
    check3DSLoader: () => {
        console.log('3DSLoader –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof THREE !== 'undefined' && typeof THREE.TDSLoader !== 'undefined');
    },
    
    checkModel: () => {
        if (window.ambulanceBackground && window.ambulanceBackground.ambulance) {
            console.log('‚úÖ –ú–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            console.log('–ü–æ–∑–∏—Ü–∏—è:', window.ambulanceBackground.ambulance.position);
            console.log('–ú–∞—Å—à—Ç–∞–±:', window.ambulanceBackground.ambulance.scale);
            console.log('–ü–æ–≤–æ—Ä–æ—Ç:', window.ambulanceBackground.ambulance.rotation);
            console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:', window.ambulanceBackground.ambulance);
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            let materialCount = 0;
            window.ambulanceBackground.ambulance.traverse((child) => {
                if (child.isMesh) {
                    materialCount++;
                    console.log(`–ú–∞—Ç–µ—Ä–∏–∞–ª ${materialCount}:`, child.material);
                    if (child.material && child.material.map) {
                        console.log(`–¢–µ–∫—Å—Ç—É—Ä–∞ ${materialCount}:`, child.material.map);
                    }
                }
            });
        } else {
            console.log('‚ùå –ú–æ–¥–µ–ª—å –†–ê–§–∏–∫–∞ –ù–ï –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        }
    },
    
    testPaths: () => {
        const paths = [
            './Models/raf22031.3ds',
            './Models/raf22031.JPG',
            './Models/raf22031.bmp'
        ];
        
        console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –†–ê–§–∏–∫–∞:');
        paths.forEach(path => {
            fetch(path, { method: 'HEAD' })
                .then(response => {
                    if (response.ok) {
                        console.log(`‚úÖ ${path} - –î–û–°–¢–£–ü–ï–ù`);
                    } else {
                        console.log(`‚ùå ${path} - –ù–ï –î–û–°–¢–£–ü–ï–ù (${response.status})`);
                    }
                })
                .catch(() => {
                    console.log(`‚ùå ${path} - –û–®–ò–ë–ö–ê –î–û–°–¢–£–ü–ê`);
                });
        });
    },
    
    info: () => {
        console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–§-22031 ===');
        window.debugAmbulance.checkThreeJS();
        window.debugAmbulance.check3DSLoader();
        window.debugAmbulance.checkModel();
        console.log('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
    }
};

console.log('‚úÖ 3D –†–ê–§-22031 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ');
console.log('üêõ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: window.debugAmbulance.info()');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π: window.debugAmbulance.testPaths()');
