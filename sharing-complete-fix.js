// share-fix-v2.js - –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–µ—Ä–∏–Ω–≥–∞
(function() {
    'use strict';
    
    console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞ v2...');
    
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(initShareFix, 2000);
    });
    
    function initShareFix() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞ v2');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        fixShareButton();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        addDebugFunctions();
    }
    
    function fixShareButton() {
        const shareButton = document.getElementById('share-results');
        if (!shareButton) {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        shareButton.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('üì§ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è v2');
            handleShareV2();
        };
        
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ v2');
    }
    
    function handleShareV2() {
        console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —à–µ—Ä–∏–Ω–≥–∞ v2...');
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        let results = findResults();
        
        if (!results) {
            console.warn('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            results = getResultsFromUser();
        }
        
        if (!results) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
        showShareModalV2(results);
    }
    
    function findResults() {
        console.log('üîç –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
        
        // –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –ø–æ ID
        const percentageEl = document.getElementById('percentage');
        const correctEl = document.getElementById('correct-answers');
        const totalEl = document.getElementById('total-questions-result');
        
        if (percentageEl && correctEl && totalEl) {
            const percentage = parseInt(percentageEl.textContent) || 0;
            const correct = parseInt(correctEl.textContent) || 0;
            const total = parseInt(totalEl.textContent) || 0;
            
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ ID:', { percentage, correct, total });
            
            if (total > 0) {
                return { percentage, correct, total, method: 'id' };
            }
        }
        
        // –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const bodyText = document.body.textContent || '';
        console.log('üìÑ –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        // –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        const percentMatch = bodyText.match(/(\d+)%/g);
        const correctMatch = bodyText.match(/–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:\s*(\d+)\s*–∏–∑\s*(\d+)/i);
        const scoreMatch = bodyText.match(/(\d+)\s*–∏–∑\s*(\d+)/g);
        
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:', {
            percentMatch,
            correctMatch,
            scoreMatch
        });
        
        if (percentMatch && scoreMatch) {
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
            const percentage = parseInt(percentMatch[percentMatch.length - 1]);
            
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å—á–µ—Ç
            const lastScore = scoreMatch[scoreMatch.length - 1];
            const scoreNumbers = lastScore.match(/(\d+)\s*–∏–∑\s*(\d+)/);
            
            if (scoreNumbers) {
                const correct = parseInt(scoreNumbers[1]);
                const total = parseInt(scoreNumbers[2]);
                
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ:', { percentage, correct, total });
                return { percentage, correct, total, method: 'text' };
            }
        }
        
        // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å –∫–ª–∞—Å—Å–∞–º–∏ —Å—á–µ—Ç–∞
        const scoreElements = document.querySelectorAll('.score, .score-percentage, .result, [class*="result"]');
        for (let el of scoreElements) {
            const text = el.textContent || '';
            const percentMatch = text.match(/(\d+)%/);
            const scoreMatch = text.match(/(\d+)\s*–∏–∑\s*(\d+)/);
            
            if (percentMatch && scoreMatch) {
                const percentage = parseInt(percentMatch[1]);
                const scoreNumbers = scoreMatch[0].match(/(\d+)\s*–∏–∑\s*(\d+)/);
                
                if (scoreNumbers) {
                    const correct = parseInt(scoreNumbers[1]);
                    const total = parseInt(scoreNumbers[2]);
                    
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö:', { percentage, correct, total });
                    return { percentage, correct, total, method: 'elements' };
                }
            }
        }
        
        console.warn('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
        return null;
    }
    
    function getResultsFromUser() {
        const percentage = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 85):');
        
        if (percentage && !isNaN(percentage)) {
            const percent = Math.max(0, Math.min(100, parseInt(percentage)));
            const total = 10; // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            const correct = Math.round((percent / 100) * total);
            
            return {
                percentage: percent,
                correct: correct,
                total: total,
                method: 'user_input'
            };
        }
        
        return null;
    }
    
    function showShareModalV2(results) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const existingModal = document.querySelector('.share-modal-v2');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modal = document.createElement('div');
        modal.className = 'share-modal-v2';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
        
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 90%;
            width: 400px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            transform: scale(0.8);
            transition: transform 0.3s ease;
        `;
        
        const message = createMessage(results);
        
        modalContent.innerHTML = `
            <h2 style="margin: 0 0 20px 0; color: #333;">üéØ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</h2>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 12px; margin: 20px 0;">
                <div style="font-size: 36px; margin-bottom: 10px;">${getEmoji(results.percentage)}</div>
                <div style="font-size: 24px; font-weight: bold; margin-bottom: 10px; color: #333;">${results.percentage}%</div>
                <div style="color: #666;">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${results.correct} –∏–∑ ${results.total}</div>
                <div style="font-size: 12px; color: #999; margin-top: 5px;">–ú–µ—Ç–æ–¥: ${results.method}</div>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 12px;">
                <button onclick="window.shareFixV2.copyText('${message.replace(/'/g, "\\'")}'); this.parentElement.parentElement.parentElement.remove();" style="background: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                </button>
                
                <button onclick="window.shareFixV2.tryVK('${message.replace(/'/g, "\\'")}'); this.parentElement.parentElement.parentElement.remove();" style="background: #4680C2; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK
                </button>
                
                <button onclick="window.shareFixV2.downloadImage(${results.percentage}, ${results.correct}, ${results.total}); this.parentElement.parentElement.parentElement.remove();" style="background: #FF9800; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üñºÔ∏è –°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
                </button>
                
                <button onclick="this.parentElement.parentElement.parentElement.remove()" style="background: #f44336; color: white; border: none; padding: 8px 16px; border-radius: 8px; cursor: pointer; font-size: 12px; margin-top: 10px;">
                    ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;
        
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.style.opacity = '1';
            modalContent.style.transform = 'scale(1)';
        }, 100);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }
    
    function createMessage(results) {
        const emoji = getEmoji(results.percentage);
        const grade = getGrade(results.percentage);
        
        let message = `${emoji} ${grade}! –ü—Ä–æ—à–µ–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑ –∏ –Ω–∞–±—Ä–∞–ª ${results.percentage}%!\\n\\n`;
        message += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correct} –∏–∑ ${results.total}\\n\\n`;
        message += `ü©∫ –ê —Ç—ã —Å–º–æ–∂–µ—à—å –ª—É—á—à–µ? –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\\n`;
        message += window.location.href;
        
        return message;
    }
    
    function getEmoji(percentage) {
        if (percentage >= 90) return 'üèÜ';
        if (percentage >= 80) return 'üåü';
        if (percentage >= 70) return 'üëè';
        if (percentage >= 60) return 'üëç';
        return 'üìö';
    }
    
    function getGrade(percentage) {
        if (percentage >= 90) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 80) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 70) return '–ù–µ–ø–ª–æ—Ö–æ';
        if (percentage >= 60) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏';
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    window.shareFixV2 = {
        copyText: function(text) {
            const cleanText = text.replace(/\\n/g, '\n');
            
            if (navigator.clipboard) {
                navigator.clipboard.writeText(cleanText)
                    .then(() => {
                        this.showToast('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                    })
                    .catch(() => {
                        this.fallbackCopy(cleanText);
                    });
            } else {
                this.fallbackCopy(cleanText);
            }
        },
        
        tryVK: function(text) {
            const cleanText = text.replace(/\\n/g, '\n');
            const bridge = this.getVKBridge();
            
            if (!bridge) {
                this.showToast('‚ùå VK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç');
                this.copyText(text);
                return;
            }
            
            bridge.send('VKWebAppShare', { message: cleanText })
                .then(() => {
                    this.showToast('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –≤ VK!');
                })
                .catch((error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ VK:', error);
                    this.showToast('‚ö†Ô∏è –û—à–∏–±–∫–∞ VK, –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç');
                    this.copyText(text);
                });
        },
        
        downloadImage: function(percentage, correct, total) {
            const canvas = document.createElement('canvas');
            canvas.width = 600;
            canvas.height = 400;
            const ctx = canvas.getContext('2d');
            
            // –§–æ–Ω
            const gradient = ctx.createLinearGradient(0, 0, 600, 400);
            gradient.addColorStop(0, '#667eea');
            gradient.addColorStop(1, '#764ba2');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, 600, 400);
            
            // –¢–µ–∫—Å—Ç
            ctx.fillStyle = 'white';
            ctx.font = 'bold 32px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ö–≤–∏–∑', 300, 60);
            
            ctx.font = 'bold 64px Arial';
            ctx.fillText(`${percentage}%`, 300, 150);
            
            ctx.font = '24px Arial';
            ctx.fillText(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct} –∏–∑ ${total}`, 300, 190);
            
            ctx.font = '18px Arial';
            ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!', 300, 280);
            
            ctx.font = '14px Arial';
            ctx.fillText(window.location.href, 300, 350);
            
            // –°–∫–∞—á–∏–≤–∞–µ–º
            canvas.toBlob((blob) => {
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `medical-quiz-${percentage}%.png`;
                link.click();
                URL.revokeObjectURL(url);
                
                this.showToast('üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
            });
        },
        
        getVKBridge: function() {
            if (window.vkBridgeInstance) return window.vkBridgeInstance;
            if (window.vkBridge) return window.vkBridge;
            if (typeof vkBridge !== 'undefined') return vkBridge;
            return null;
        },
        
        fallbackCopy: function(text) {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.left = '-9999px';
            document.body.appendChild(textarea);
            textarea.select();
            
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    this.showToast('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                } else {
                    alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
                }
            } catch (err) {
                alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
            }
            
            document.body.removeChild(textarea);
        },
        
        showToast: function(message) {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #333;
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                z-index: 10001;
                font-size: 14px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            `;
            toast.textContent = message;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }
    };
    
    function addDebugFunctions() {
        window.debugShareV2 = {
            findResults: findResults,
            testModal: () => {
                showShareModalV2({
                    percentage: 85,
                    correct: 8,
                    total: 10,
                    method: 'test'
                });
            },
            inspectPage: () => {
                console.log('üîç –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                console.log('üìÑ –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', document.body.textContent);
                console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç—ã —Å ID percentage:', document.getElementById('percentage'));
                console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç—ã —Å ID correct-answers:', document.getElementById('correct-answers'));
                console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç—ã —Å ID total-questions-result:', document.getElementById('total-questions-result'));
                
                const allElements = document.querySelectorAll('*');
                const withNumbers = [];
                allElements.forEach(el => {
                    const text = el.textContent?.trim();
                    if (text && /\d/.test(text) && text.length < 100 && !el.querySelector('*')) {
                        withNumbers.push({
                            tag: el.tagName,
                            id: el.id,
                            class: el.className,
                            text: text
                        });
                    }
                });
                console.log('üî¢ –≠–ª–µ–º–µ–Ω—Ç—ã —Å —á–∏—Å–ª–∞–º–∏:', withNumbers);
            }
        };
        
        console.log('üêõ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: window.debugShareV2');
    }
    
    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞ v2 –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    
})();
