// sharing-complete-fix.js - –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å —à–µ—Ä–∏–Ω–≥–æ–º
(function() {
    'use strict';
    
    console.log('üöë –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞...');
    
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(initCompleteShareFix, 2000);
    });
    
    function initCompleteShareFix() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞');
        
        // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞
        fixResultsRetrieval();
        
        // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        fixShareButton();
        
        // 3. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        addDebugInfo();
    }
    
    // ===== 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
    function fixResultsRetrieval() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                    const target = mutation.target;
                    if (target.id === 'results-container' && target.style.display !== 'none') {
                        console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ...');
                        setTimeout(captureResults, 1000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É
                    }
                }
            });
        });
        
        const resultsContainer = document.getElementById('results-container');
        if (resultsContainer) {
            observer.observe(resultsContainer, { attributes: true, attributeFilter: ['style'] });
        }
    }
    
    function captureResults() {
        const results = getResultsFromDOM();
        if (results && results.isValid) {
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', results);
            window.currentQuizResults = results; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (window.Gamification) {
                window.Gamification.onQuizComplete({
                    percentage: results.percentage,
                    correct: results.correct,
                    total: results.total
                });
            }
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        }
    }
    
    function getResultsFromDOM() {
        try {
            const percentageEl = document.getElementById('percentage');
            const correctEl = document.getElementById('correct-answers');
            const totalEl = document.getElementById('total-questions-result');
            
            if (!percentageEl || !correctEl || !totalEl) {
                console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return null;
            }
            
            const percentage = parseInt(percentageEl.textContent) || 0;
            const correct = parseInt(correctEl.textContent) || 0;
            const total = parseInt(totalEl.textContent) || 0;
            
            console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ DOM:', { percentage, correct, total });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            const isValid = total > 0 && percentage >= 0 && percentage <= 100 && correct >= 0 && correct <= total;
            
            if (!isValid) {
                console.warn('‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { percentage, correct, total });
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const correctedPercentage = Math.round((correct / total) * 100);
                console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞:', correctedPercentage);
                
                return {
                    percentage: correctedPercentage,
                    correct: correct,
                    total: total,
                    isValid: true,
                    wasCorrected: true
                };
            }
            
            return {
                percentage: percentage,
                correct: correct,
                total: total,
                isValid: true,
                wasCorrected: false
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
            return null;
        }
    }
    
    // ===== 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ò –ü–û–î–ï–õ–ò–¢–¨–°–Ø =====
    function fixShareButton() {
        const shareButton = document.getElementById('share-results');
        if (!shareButton) {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        shareButton.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('üì§ –ö–ª–∏–∫ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è');
            handleShare();
        };
        
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
    
    function handleShare() {
        const results = window.currentQuizResults || getResultsFromDOM();
        
        if (!results || !results.isValid) {
            console.error('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞');
            alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞');
            return;
        }
        
        console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º —à–µ—Ä–∏–Ω–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:', results);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        showShareModal(results);
    }
    
    function showShareModal(results) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const existingModal = document.querySelector('.share-modal-fixed');
        if (existingModal) {
            existingModal.remove();
        }
        
        const modal = createShareModal(results);
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
            modal.classList.add('show');
        }, 100);
    }
    
    function createShareModal(results) {
        const modal = document.createElement('div');
        modal.className = 'share-modal-fixed';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
        
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 90%;
            width: 400px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            transform: scale(0.9);
            transition: transform 0.3s ease;
        `;
        
        const message = createShareMessage(results);
        
        modalContent.innerHTML = `
            <h2 style="margin: 0 0 20px 0; color: #333;">üéØ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</h2>
            
            <div style="background: #f8f9fa; padding: 20px; border-radius: 12px; margin: 20px 0;">
                <div style="font-size: 36px; margin-bottom: 10px;">${getResultEmoji(results.percentage)}</div>
                <div style="font-size: 24px; font-weight: bold; margin-bottom: 10px; color: #333;">${results.percentage}%</div>
                <div style="color: #666;">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${results.correct} –∏–∑ ${results.total}</div>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 12px; margin-top: 25px;">
                <button class="share-option" data-action="copy" style="background: #4CAF50; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
                </button>
                
                <button class="share-option" data-action="vk" style="background: #4680C2; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üí¨ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å VK
                </button>
                
                <button class="share-option" data-action="download" style="background: #FF9800; color: white; border: none; padding: 12px 20px; border-radius: 8px; cursor: pointer; font-size: 14px;">
                    üñºÔ∏è –°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
                </button>
                
                <button onclick="this.parentElement.parentElement.parentElement.remove()" style="background: #f44336; color: white; border: none; padding: 8px 16px; border-radius: 8px; cursor: pointer; font-size: 12px; margin-top: 10px;">
                    ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;
        
        modal.appendChild(modalContent);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        modal.addEventListener('click', function(e) {
            if (e.target.classList.contains('share-option')) {
                const action = e.target.dataset.action;
                handleShareAction(action, results, message);
                modal.remove();
            } else if (e.target === modal) {
                modal.remove();
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.classList.add('show');
        modal.style.opacity = '1';
        modalContent.style.transform = 'scale(1)';
        
        return modal;
    }
    
    function handleShareAction(action, results, message) {
        console.log(`üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        
        switch (action) {
            case 'copy':
                copyToClipboard(message);
                break;
            case 'vk':
                tryVKShare(message);
                break;
            case 'download':
                downloadResultImage(results);
                break;
        }
        
        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —à–µ—Ä–∏–Ω–≥
        giveShareReward();
    }
    
    function copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text)
                .then(() => {
                    showToast('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                })
                .catch(() => {
                    fallbackCopy(text);
                });
        } else {
            fallbackCopy(text);
        }
    }
    
    function fallbackCopy(text) {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.style.position = 'fixed';
        textarea.style.left = '-9999px';
        document.body.appendChild(textarea);
        textarea.select();
        
        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showToast('üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
            } else {
                alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
            }
        } catch (err) {
            alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
        }
        
        document.body.removeChild(textarea);
    }
    
    function tryVKShare(message) {
        const bridge = getVKBridge();
        if (!bridge) {
            showToast('‚ùå VK Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            copyToClipboard(message); // Fallback
            return;
        }
        
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ VK...');
        
        bridge.send('VKWebAppShare', { message: message })
            .then((data) => {
                console.log('‚úÖ VK Share —É—Å–ø–µ—à–Ω–æ:', data);
                showToast('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å!');
            })
            .catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ VK Share:', error);
                showToast('‚ö†Ô∏è VK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
                copyToClipboard(message); // Fallback
            });
    }
    
    function downloadResultImage(results) {
        const canvas = document.createElement('canvas');
        canvas.width = 600;
        canvas.height = 400;
        const ctx = canvas.getContext('2d');
        
        // –§–æ–Ω
        const gradient = ctx.createLinearGradient(0, 0, 600, 400);
        gradient.addColorStop(0, '#667eea');
        gradient.addColorStop(1, '#764ba2');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 600, 400);
        
        // –¢–µ–∫—Å—Ç
        ctx.fillStyle = 'white';
        ctx.font = 'bold 32px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ö–≤–∏–∑', 300, 60);
        
        ctx.font = 'bold 64px Arial';
        ctx.fillText(`${results.percentage}%`, 300, 150);
        
        ctx.font = '24px Arial';
        ctx.fillText(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${results.correct} –∏–∑ ${results.total}`, 300, 190);
        
        ctx.font = '18px Arial';
        ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!', 300, 280);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º
        canvas.toBlob(function(blob) {
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `medical-quiz-${results.percentage}%.png`;
            link.click();
            URL.revokeObjectURL(url);
            
            showToast('üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        });
    }
    
    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
    function createShareMessage(results) {
        const emoji = getResultEmoji(results.percentage);
        const grade = getResultGrade(results.percentage);
        
        let message = `${emoji} ${grade}! –ü—Ä–æ—à–µ–ª –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑ –∏ –Ω–∞–±—Ä–∞–ª ${results.percentage}%!\n\n`;
        message += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correct} –∏–∑ ${results.total}\n`;
        message += `\nü©∫ –ê —Ç—ã —Å–º–æ–∂–µ—à—å –ª—É—á—à–µ? –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è!\n`;
        message += window.location.href;
        
        return message;
    }
    
    function getResultEmoji(percentage) {
        if (percentage >= 90) return 'üèÜ';
        if (percentage >= 80) return 'üåü';
        if (percentage >= 70) return 'üëè';
        if (percentage >= 60) return 'üëç';
        return 'üìö';
    }
    
    function getResultGrade(percentage) {
        if (percentage >= 90) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 80) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 70) return '–ù–µ–ø–ª–æ—Ö–æ';
        if (percentage >= 60) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å—Å—è';
    }
    
    function getVKBridge() {
        if (window.vkBridgeInstance) return window.vkBridgeInstance;
        if (window.vkBridge) return window.vkBridge;
        if (typeof vkBridge !== 'undefined') return vkBridge;
        return null;
    }
    
    function showToast(message) {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            z-index: 10001;
            font-size: 14px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;
        toast.textContent = message;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
    
    function giveShareReward() {
        if (window.Gamification && window.Gamification.stats) {
            const stats = window.Gamification.stats;
            
            if (!stats.achievements.includes('social')) {
                stats.achievements.push('social');
                setTimeout(() => {
                    window.Gamification.showAchievement('–°–æ—Ü–∏–∞–ª—å–Ω—ã–π: –ø–æ–¥–µ–ª–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! üì±');
                }, 500);
                window.Gamification.saveStats();
            }
        }
    }
    
    // ===== 3. –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
    function addDebugInfo() {
        console.log('üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.debugShareFix = {
            getResults: () => {
                const results = getResultsFromDOM();
                console.log('üìä –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
                return results;
            },
            testShare: () => {
                console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–µ—Ä–∏–Ω–≥...');
                const results = getResultsFromDOM() || {
                    percentage: 85,
                    correct: 8,
                    total: 10,
                    isValid: true
                };
                showShareModal(results);
            },
            checkVK: () => {
                const bridge = getVKBridge();
                console.log('üîç VK Bridge:', bridge ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return !!bridge;
            }
        };
        
        console.log('üêõ –î–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏: window.debugShareFix');
    }
    
    console.log('‚úÖ –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    
})();
