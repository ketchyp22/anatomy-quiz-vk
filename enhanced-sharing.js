// enhanced-sharing.js - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã "—Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞"
(function() {
    'use strict';
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(enhanceSharing, 2000);
    });
    
    function enhanceSharing() {
        console.log('üé® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–µ—Ä–∏–Ω–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');
        
        // –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –Ω–∞ –±–æ–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é
        replaceShareButton();
    }
    
    function replaceShareButton() {
        const shareButton = document.getElementById('share-results');
        if (!shareButton) return;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        shareButton.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('üì§ –ö–ª–∏–∫ –ø–æ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"');
            showSharingModal();
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        shareButton.innerHTML = 'üéØ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏';
        
        console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —É–ª—É—á—à–µ–Ω–∞');
    }
    
    function showSharingModal() {
        const results = getCurrentResults();
        if (!results) {
            alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        const modal = createSharingModal(results);
        document.body.appendChild(modal);
    }
    
    function createSharingModal(results) {
        const modal = document.createElement('div');
        modal.className = 'sharing-modal-enhanced';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            backdrop-filter: blur(8px);
        `;
        
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            max-width: 90%;
            width: 450px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            animation: modalSlideIn 0.4s ease-out;
            position: relative;
        `;
        
        const message = createDetailedMessage(results);
        
        modalContent.innerHTML = `
            <button onclick="this.parentElement.parentElement.remove()" style="position: absolute; top: 15px; right: 15px; background: rgba(255,255,255,0.2); border: none; color: white; width: 30px; height: 30px; border-radius: 50%; cursor: pointer; font-size: 18px;">√ó</button>
            
            <h2 style="margin: 0 0 20px 0; font-size: 24px;">üéØ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏</h2>
            
            <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 12px; margin: 20px 0; backdrop-filter: blur(10px);">
                <div style="font-size: 48px; margin-bottom: 10px;">${getResultEmoji(results.percentage)}</div>
                <div style="font-size: 28px; font-weight: bold; margin-bottom: 10px;">${results.percentage}%</div>
                <div style="font-size: 16px; opacity: 0.9;">–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${results.correct} –∏–∑ ${results.total}</div>
            </div>
            
            <div style="display: flex; flex-direction: column; gap: 12px; margin-top: 25px;">
                <button class="share-option" data-action="image" style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); color: white; border: none; padding: 15px 20px; border-radius: 12px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s;">
                    üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                </button>
                
                <button class="share-option" data-action="text" style="background: linear-gradient(135deg, #4ecdc4, #44a08d); color: white; border: none; padding: 15px 20px; border-radius: 12px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s;">
                    üìù –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞
                </button>
                
                <button class="share-option" data-action="vk" style="background: linear-gradient(135deg, #4680C2, #3a6ba5); color: white; border: none; padding: 15px 20px; border-radius: 12px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s;">
                    üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º (VK)
                </button>
                
                <button class="share-option" data-action="story" style="background: linear-gradient(135deg, #f093fb, #f5576c); color: white; border: none; padding: 15px 20px; border-radius: 12px; font-size: 16px; font-weight: 600; cursor: pointer; transition: all 0.3s;">
                    üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        const style = document.createElement('style');
        style.textContent = `
            @keyframes modalSlideIn {
                from {
                    opacity: 0;
                    transform: scale(0.7) translateY(-50px);
                }
                to {
                    opacity: 1;
                    transform: scale(1) translateY(0);
                }
            }
            .share-option:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            }
        `;
        document.head.appendChild(style);
        
        modal.appendChild(modalContent);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        modal.addEventListener('click', function(e) {
            if (e.target.classList.contains('share-option')) {
                const action = e.target.dataset.action;
                handleShareAction(action, results, message);
                modal.remove();
                style.remove();
            } else if (e.target === modal) {
                modal.remove();
                style.remove();
            }
        });
        
        return modal;
    }
    
    function handleShareAction(action, results, message) {
        console.log(`üéØ –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± —à–µ—Ä–∏–Ω–≥–∞: ${action}`);
        
        switch (action) {
            case 'image':
                createShareImage(results);
                break;
            case 'text':
                copyTextForPost(message);
                break;
            case 'vk':
                shareViaVKMessage(message);
                break;
            case 'story':
                shareToStory(results);
                break;
        }
        
        // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ª—é–±–æ–π —à–µ—Ä–∏–Ω–≥
        giveShareReward();
    }
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    function createShareImage(results) {
        console.log('üñºÔ∏è –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');
        
        const canvas = document.createElement('canvas');
        canvas.width = 600;
        canvas.height = 400;
        const ctx = canvas.getContext('2d');
        
        // –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        const gradient = ctx.createLinearGradient(0, 0, 600, 400);
        gradient.addColorStop(0, '#667eea');
        gradient.addColorStop(1, '#764ba2');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 600, 400);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctx.fillStyle = 'white';
        ctx.font = 'bold 32px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ö–≤–∏–∑', 300, 60);
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        ctx.font = 'bold 72px Arial';
        ctx.fillText(`${results.percentage}%`, 300, 160);
        
        // –î–µ—Ç–∞–ª–∏
        ctx.font = '24px Arial';
        ctx.fillText(`–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${results.correct} –∏–∑ ${results.total}`, 300, 200);
        
        // –†–µ–∂–∏–º –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        const modeBtn = document.querySelector('.quiz-mode-btn.active');
        const diffBtn = document.querySelector('.difficulty-btn.active');
        const mode = modeBtn ? modeBtn.textContent.trim() : '–¢–µ—Å—Ç';
        const difficulty = diffBtn ? diffBtn.textContent.trim() : '';
        
        ctx.font = '20px Arial';
        ctx.fillText(`${mode} ${difficulty ? '(' + difficulty.toLowerCase() + ')' : ''}`, 300, 240);
        
        // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        const motivationText = getMotivationText(results.percentage);
        ctx.font = '18px Arial';
        ctx.fillText(motivationText, 300, 280);
        
        // –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        ctx.font = 'bold 16px Arial';
        ctx.fillText('–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è!', 300, 320);
        
        // URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        ctx.font = '14px Arial';
        ctx.fillStyle = 'rgba(255,255,255,0.8)';
        ctx.fillText(window.location.href, 300, 360);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
        canvas.toBlob(function(blob) {
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `medical-quiz-result-${results.percentage}%.png`;
            link.click();
            
            URL.revokeObjectURL(url);
            
            showToast('üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë –≤ –ø–æ—Å—Ç –í–ö', 'success');
        });
    }
    
    // 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞
    function copyTextForPost(message) {
        console.log('üìù –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞');
        
        if (navigator.clipboard) {
            navigator.clipboard.writeText(message)
                .then(() => {
                    showToast('üìù –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É –í–ö', 'success');
                })
                .catch(() => fallbackCopy(message));
        } else {
            fallbackCopy(message);
        }
    }
    
    // 3. –®–µ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ VK —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
    function shareViaVKMessage(message) {
        console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ VK —Å–æ–æ–±—â–µ–Ω–∏—è');
        
        const bridge = getVKBridge();
        if (bridge) {
            bridge.send('VKWebAppShare', { message: message })
                .then(() => {
                    showToast('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ VK Share:', error);
                    showToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ VK', 'error');
                });
        } else {
            showToast('‚ùå VK Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        }
    }
    
    // 4. –®–µ—Ä–∏–Ω–≥ –≤ –∏—Å—Ç–æ—Ä–∏–∏ VK
    function shareToStory(results) {
        console.log('üì± –î–µ–ª–∏–º—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ VK');
        
        const bridge = getVKBridge();
        if (!bridge) {
            showToast('‚ùå VK Bridge –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π', 'error');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        const storyData = {
            background_type: 'color',
            background_color: '#667eea',
            stickers: [{
                sticker_type: 'renderable',
                sticker: {
                    content_type: 'text',
                    text: `ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑\n${results.percentage}%\n${results.correct}/${results.total}`,
                    style: 'white'
                }
            }]
        };
        
        bridge.send('VKWebAppShowStoryBox', storyData)
            .then(() => {
                showToast('üì± –ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!', 'success');
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ Story:', error);
                showToast('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', 'error');
            });
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getCurrentResults() {
        try {
            const percentageEl = document.getElementById('percentage');
            const correctEl = document.getElementById('correct-answers');
            const totalEl = document.getElementById('total-questions-result');
            
            if (!percentageEl || !correctEl || !totalEl) return null;
            
            return {
                percentage: parseInt(percentageEl.textContent) || 0,
                correct: parseInt(correctEl.textContent) || 0,
                total: parseInt(totalEl.textContent) || 0
            };
        } catch (e) {
            return null;
        }
    }
    
    function createDetailedMessage(results) {
        const modeBtn = document.querySelector('.quiz-mode-btn.active');
        const diffBtn = document.querySelector('.difficulty-btn.active');
        
        const mode = modeBtn ? modeBtn.textContent.trim() : '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–≤–∏–∑';
        const difficulty = diffBtn ? diffBtn.textContent.trim() : '–æ–±—ã—á–Ω—ã–π';
        
        const emoji = getResultEmoji(results.percentage);
        const grade = getResultGrade(results.percentage);
        
        let message = `${emoji} ${grade}! –ü—Ä–æ—à–µ–ª "${mode}"`;
        
        if (difficulty.toLowerCase() !== '–æ–±—ã—á–Ω—ã–π') {
            message += ` (${difficulty.toLowerCase()} —É—Ä–æ–≤–µ–Ω—å)`;
        }
        
        message += ` –∏ –Ω–∞–±—Ä–∞–ª ${results.percentage}%!\n\n`;
        message += `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${results.correct} –∏–∑ ${results.total}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (window.Gamification && window.Gamification.stats) {
            const stats = window.Gamification.stats;
            
            if (stats.currentStreak > 2) {
                message += `üî• –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${stats.currentStreak}\n`;
            }
            
            if (stats.totalQuizzes > 1) {
                message += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${stats.totalQuizzes}\n`;
            }
            
            if (stats.achievements && stats.achievements.length > 0) {
                message += `üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${stats.achievements.length}\n`;
            }
        }
        
        message += '\nü©∫ –ê —Ç—ã —Å–º–æ–∂–µ—à—å –ª—É—á—à–µ? –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è!\n';
        message += window.location.href;
        
        return message;
    }
    
    function getResultEmoji(percentage) {
        if (percentage >= 95) return 'üèÜ';
        if (percentage >= 85) return 'üåü';
        if (percentage >= 75) return 'üëè';
        if (percentage >= 60) return 'üëç';
        if (percentage >= 50) return 'üìö';
        return 'üí™';
    }
    
    function getResultGrade(percentage) {
        if (percentage >= 95) return '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ';
        if (percentage >= 85) return '–û—Ç–ª–∏—á–Ω–æ';
        if (percentage >= 75) return '–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ';
        if (percentage >= 60) return '–•–æ—Ä–æ—à–æ';
        if (percentage >= 50) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
        return '–ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å—Å—è';
    }
    
    function getMotivationText(percentage) {
        if (percentage >= 90) return '–ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!';
        if (percentage >= 80) return '–û—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è!';
        if (percentage >= 70) return '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!';
        if (percentage >= 50) return '–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!';
        return '–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!';
    }
    
    function getVKBridge() {
        if (window.vkBridgeInstance) return window.vkBridgeInstance;
        if (window.vkBridge) return window.vkBridge;
        if (typeof vkBridge !== 'undefined') return vkBridge;
        return null;
    }
    
    function fallbackCopy(text) {
        try {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-9999px';
            document.body.appendChild(textArea);
            textArea.select();
            
            const successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                showToast('üìù –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
            } else {
                alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
            }
        } catch (e) {
            alert(`–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:\n\n${text}`);
        }
    }
    
    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#28a745' : '#dc3545'};
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            font-weight: 500;
            z-index: 10001;
            max-width: 350px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideInRight 0.3s ease-out;
        `;
        
        toast.textContent = message;
        
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { opacity: 0; transform: translateX(100%); }
                to { opacity: 1; transform: translateX(0); }
            }
        `;
        document.head.appendChild(style);
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode) toast.parentNode.removeChild(toast);
                if (style.parentNode) style.parentNode.removeChild(style);
            }, 300);
        }, 5000);
    }
    
    function giveShareReward() {
        if (window.Gamification && window.Gamification.stats) {
            const stats = window.Gamification.stats;
            
            if (!stats.achievements.includes('social')) {
                stats.achievements.push('social');
                setTimeout(() => {
                    window.Gamification.showAchievement('–°–æ—Ü–∏–∞–ª—å–Ω—ã–π: –ø–æ–¥–µ–ª–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º! üì±');
                }, 1000);
                window.Gamification.saveStats();
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.testEnhancedSharing = function() {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–µ—Ä–∏–Ω–≥');
        showSharingModal();
    };
    
})();
